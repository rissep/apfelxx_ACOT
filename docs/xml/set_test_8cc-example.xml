<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="set_test_8cc-example" kind="example">
    <compoundname>set_test.cc</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename="set_test.cc"><codeline><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>APFEL++<sp/>2017</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>Valerio<sp/>Bertone:<sp/>valerio.bertone@cern.ch</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="apfelxx_8h" kindref="compound">apfel/apfelxx.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="splittingfunctionsunp__sl_8h" kindref="compound">apfel/splittingfunctionsunp_sl.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classapfel_1_1Timer" kindref="compound">apfel::Timer</ref><sp/>t,ttot;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Grid</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Grid" kindref="compound">apfel::Grid</ref><sp/>g{{<ref refid="classapfel_1_1SubGrid" kindref="compound">apfel::SubGrid</ref>{80,1e-5,3},<sp/><ref refid="classapfel_1_1SubGrid" kindref="compound">apfel::SubGrid</ref>{50,1e-1,5},<sp/><ref refid="classapfel_1_1SubGrid" kindref="compound">apfel::SubGrid</ref>{40,8e-1,5}}};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>LO<sp/>splitting<sp/>functions<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Initializing<sp/>operators...<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a8b8ffd3f8ceb45b50ecd2d7b00f84ccb" kindref="member">start</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>std::map&lt;int,<sp/>apfel::Operator&gt;&gt;<sp/>OpMap;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Operator" kindref="compound">apfel::Operator</ref><sp/>O0ns{g,<sp/><ref refid="classapfel_1_1P0ns" kindref="compound">apfel::P0ns</ref>{}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Operator" kindref="compound">apfel::Operator</ref><sp/>O0gq{g,<sp/><ref refid="classapfel_1_1P0gq" kindref="compound">apfel::P0gq</ref>{}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nf<sp/>=<sp/>3;<sp/>nf<sp/>&lt;=<sp/>6;<sp/>nf++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Operator" kindref="compound">apfel::Operator</ref><sp/>O0qg{g,<sp/><ref refid="classapfel_1_1P0qg" kindref="compound">apfel::P0qg</ref>{nf}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Operator" kindref="compound">apfel::Operator</ref><sp/>O0gg{g,<sp/><ref refid="classapfel_1_1P0gg" kindref="compound">apfel::P0gg</ref>{nf}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>apfel::Operator&gt;<sp/>OM;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OM.insert({<ref refid="classapfel_1_1EvolutionBasisQCD_1afb35598009d55d438109390cd26796b8a780c887bda77b31b4230e9bfe5fbc231" kindref="member">apfel::EvolutionBasisQCD::PNSP</ref>,O0ns});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OM.insert({<ref refid="classapfel_1_1EvolutionBasisQCD_1afb35598009d55d438109390cd26796b8a10c9ad40a7680ef8811a66a0b27553ac" kindref="member">apfel::EvolutionBasisQCD::PNSM</ref>,O0ns});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OM.insert({<ref refid="classapfel_1_1EvolutionBasisQCD_1afb35598009d55d438109390cd26796b8ace59a3576047e627dddbd8a6b5c663c5" kindref="member">apfel::EvolutionBasisQCD::PNSV</ref>,O0ns});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OM.insert({<ref refid="classapfel_1_1EvolutionBasisQCD_1afb35598009d55d438109390cd26796b8a55f1f6a7011dc376312e91d67b11224d" kindref="member">apfel::EvolutionBasisQCD::PQQ</ref>,<sp/>O0ns});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OM.insert({<ref refid="classapfel_1_1EvolutionBasisQCD_1afb35598009d55d438109390cd26796b8a3dd95b1224451bf978ce364aae5a2a20" kindref="member">apfel::EvolutionBasisQCD::PQG</ref>,<sp/>O0qg});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OM.insert({<ref refid="classapfel_1_1EvolutionBasisQCD_1afb35598009d55d438109390cd26796b8a50e295396071e5f694cb5f4c77c330b6" kindref="member">apfel::EvolutionBasisQCD::PGQ</ref>,<sp/>O0gq});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OM.insert({<ref refid="classapfel_1_1EvolutionBasisQCD_1afb35598009d55d438109390cd26796b8a92a85eba6acccd6cf23b5059be4a7946" kindref="member">apfel::EvolutionBasisQCD::PGG</ref>,<sp/>O0gg});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OpMap.insert({nf,OM});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a015b2c516bb668f392faa6d0a5eae3c1" kindref="member">stop</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>distributions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Initializing<sp/>distributions...<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a8b8ffd3f8ceb45b50ecd2d7b00f84ccb" kindref="member">start</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>apfel::Distribution&gt;<sp/>DistMap<sp/>=<sp/><ref refid="namespaceapfel_1a3b75bf7eb5dca3f9b3c0319dfcf01d9d" kindref="member">DistributionMap</ref>(g,<sp/>apfel::LHToyPDFs,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a015b2c516bb668f392faa6d0a5eae3c1" kindref="member">stop</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Initializing<sp/>set<sp/>of<sp/>operators<sp/>and<sp/>distributions...<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a8b8ffd3f8ceb45b50ecd2d7b00f84ccb" kindref="member">start</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>maps</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>apfel::EvolutionBasisQCD&gt;<sp/>basis;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nf<sp/>=<sp/>3;<sp/>nf<sp/>&lt;=<sp/>6;<sp/>nf++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>basis.insert({nf,<sp/>apfel::EvolutionBasisQCD{nf}});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>set<sp/>of<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>apfel::Set&lt;apfel::Operator&gt;&gt;<sp/>Splittings;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nf<sp/>=<sp/>3;<sp/>nf<sp/>&lt;=<sp/>6;<sp/>nf++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Splittings.insert({nf,<sp/>apfel::Set&lt;apfel::Operator&gt;{basis.at(nf),<sp/>OpMap.at(nf)}});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>set<sp/>of<sp/>initial<sp/>distributions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classapfel_1_1Set" kindref="compound">apfel::Set&lt;apfel::Distribution&gt;</ref><sp/>PDFs{basis.at(5),<sp/>DistMap};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a015b2c516bb668f392faa6d0a5eae3c1" kindref="member">stop</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>products</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nTesting<sp/>products...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a8b8ffd3f8ceb45b50ecd2d7b00f84ccb" kindref="member">start</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Set" kindref="compound">apfel::Set&lt;apfel::Distribution&gt;</ref><sp/>Product<sp/>=<sp/>Splittings.at(5)<sp/>*<sp/>PDFs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(Splitting<sp/>*<sp/>PDFs)[GLUON](x=0.1)<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Product.<ref refid="classapfel_1_1Set_1adc221d1fbd6323776a3c07408db8bd24" kindref="member">at</ref>(<ref refid="classapfel_1_1EvolutionBasisQCD_1a0e3bb51b09bf1cfae51916729c1c8169a534d9a14dbdfbf52b606e9d09a9bfec1" kindref="member">apfel::EvolutionBasisQCD::GLUON</ref>).<ref refid="classapfel_1_1Interpolator_1aaa04fd13b61de9eca4bce12c4afd8e97" kindref="member">Evaluate</ref>(0.1)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Set" kindref="compound">apfel::Set&lt;apfel::Distribution&gt;</ref><sp/>Product2<sp/>=<sp/>3<sp/>*<sp/>Splittings.at(5)<sp/>*<sp/>PDFs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(3<sp/>*<sp/>Splitting<sp/>*<sp/>PDFs)[GLUON](x=0.1)<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Product2.<ref refid="classapfel_1_1Set_1adc221d1fbd6323776a3c07408db8bd24" kindref="member">at</ref>(<ref refid="classapfel_1_1EvolutionBasisQCD_1a0e3bb51b09bf1cfae51916729c1c8169a534d9a14dbdfbf52b606e9d09a9bfec1" kindref="member">apfel::EvolutionBasisQCD::GLUON</ref>).<ref refid="classapfel_1_1Interpolator_1aaa04fd13b61de9eca4bce12c4afd8e97" kindref="member">Evaluate</ref>(0.1)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Set" kindref="compound">apfel::Set&lt;apfel::Distribution&gt;</ref><sp/>Sum<sp/>=<sp/>(<sp/>Splittings.at(5)<sp/>+<sp/>2<sp/>*<sp/>Splittings.at(5)<sp/>)<sp/>*<sp/>PDFs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[(Splitting<sp/>*<sp/>PDFs)[GLUON]<sp/>+<sp/>2<sp/>*<sp/>(Splitting<sp/>*<sp/>PDFs)[GLUON]](x=0.1)<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Sum.<ref refid="classapfel_1_1Set_1adc221d1fbd6323776a3c07408db8bd24" kindref="member">at</ref>(<ref refid="classapfel_1_1EvolutionBasisQCD_1a0e3bb51b09bf1cfae51916729c1c8169a534d9a14dbdfbf52b606e9d09a9bfec1" kindref="member">apfel::EvolutionBasisQCD::GLUON</ref>).<ref refid="classapfel_1_1Interpolator_1aaa04fd13b61de9eca4bce12c4afd8e97" kindref="member">Evaluate</ref>(0.1)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a015b2c516bb668f392faa6d0a5eae3c1" kindref="member">stop</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nTotal<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ttot.<ref refid="classapfel_1_1Timer_1a015b2c516bb668f392faa6d0a5eae3c1" kindref="member">stop</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>Set</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>Sum<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
