<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classapfel_1_1Dglap" kind="class" language="C++" prot="public">
    <compoundname>apfel::Dglap</compoundname>
    <basecompoundref refid="classapfel_1_1MatchedEvolution" prot="public" virt="non-virtual">apfel::MatchedEvolution&lt; Set&lt; T &gt; &gt;</basecompoundref>
    <includes refid="dglap_8h" local="no">dglap.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Setters</header>
      <memberdef kind="function" id="classapfel_1_1Dglap_1a19ef0f9a007856ba1bd46f07dea5f93a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apfel::Dglap&lt; T &gt;::SetInitialDistributions</definition>
        <argsstring>(std::function&lt; double(int const &amp;, double const &amp;)&gt; const &amp;InDistFunc)</argsstring>
        <name>SetInitialDistributions</name>
        <param>
          <type>std::function&lt; double(int const &amp;, double const &amp;)&gt; const &amp;</type>
          <declname>InDistFunc</declname>
        </param>
        <briefdescription>
<para>Function that sets the reference object at the reference scale using a function of the index and x. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>InDistFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that returns the distributions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglap.h" line="71" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Dglap_1a04933fdfd995c4c3efd63bd5d18729de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apfel::Dglap&lt; T &gt;::SetInitialDistributions</definition>
        <argsstring>(std::function&lt; std::map&lt; int, double &gt;(double const &amp;)&gt; const &amp;InDistFunc)</argsstring>
        <name>SetInitialDistributions</name>
        <param>
          <type>std::function&lt; std::map&lt; int, double &gt;(double const &amp;)&gt; const &amp;</type>
          <declname>InDistFunc</declname>
        </param>
        <briefdescription>
<para>Function that sets the reference distribution at the reference scale using a map of the distribution as function of x. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>InDistFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that returns the distributions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglap.h" line="79" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Dglap_1a67f9c5ca05164c1ea2804341de2bced8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apfel::Dglap&lt; T &gt;::SetInitialDistributions</definition>
        <argsstring>(std::function&lt; std::map&lt; int, double &gt;(double const &amp;, double const &amp;)&gt; const &amp;InDistFunc, double const &amp;mu)</argsstring>
        <name>SetInitialDistributions</name>
        <param>
          <type>std::function&lt; std::map&lt; int, double &gt;(double const &amp;, double const &amp;)&gt; const &amp;</type>
          <declname>InDistFunc</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>mu</declname>
        </param>
        <briefdescription>
<para>Function that sets the reference distribution at the reference scale using a map of the distribution as function of x and Q. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>InDistFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that returns the distributions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mu</parametername>
</parameternamelist>
<parameterdescription>
<para>the scale at which distributions have to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglap.h" line="88" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classapfel_1_1Dglap_1af722ff596c7beaaf23506d9983f4d52d" prot="private" static="no" mutable="no">
        <type>std::function&lt; <ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; <ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref> &gt;int const  &amp;, double const  &amp;)&gt;</type>
        <definition>std::function&lt;Set&lt;Operator&gt;int const&amp;,double const&amp;)&gt; apfel::Dglap&lt; T &gt;::_SplittingFunctions</definition>
        <argsstring></argsstring>
        <name>_SplittingFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglap.h" line="91" column="21" bodyfile="inc/apfel/dglap.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classapfel_1_1Dglap_1a8934eb2e07103d88fd051610b5631f31" prot="private" static="no" mutable="no">
        <type>std::function&lt; <ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; <ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref> &gt;bool const  &amp;, int const  &amp;)&gt;</type>
        <definition>std::function&lt;Set&lt;Operator&gt;bool const&amp;,int const&amp;)&gt; apfel::Dglap&lt; T &gt;::_MatchingConditions</definition>
        <argsstring></argsstring>
        <name>_MatchingConditions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglap.h" line="92" column="23" bodyfile="inc/apfel/dglap.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classapfel_1_1Dglap_1a4abb8353b7d12194adbb327f7b11a560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Dglap&lt; T &gt;::Dglap</definition>
        <argsstring>()=delete</argsstring>
        <name>Dglap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglap.h" line="24" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Dglap_1ab35d51b5e877e37714377404b9dca5b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Dglap&lt; T &gt;::Dglap</definition>
        <argsstring>(std::function&lt; Set&lt; Operator &gt;(int const &amp;, double const &amp;)&gt; const &amp;SplittingFunctions, std::function&lt; Set&lt; Operator &gt;(bool const &amp;, int const &amp;)&gt; const &amp;MatchingConditions, Set&lt; T &gt; const &amp;ObjRef, double const &amp;MuRef, std::vector&lt; double &gt; const &amp;Thresholds, int const &amp;nsteps=10)</argsstring>
        <name>Dglap</name>
        <param>
          <type>std::function&lt; <ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; <ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref> &gt;(int const &amp;, double const &amp;)&gt; const &amp;</type>
          <declname>SplittingFunctions</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; <ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref> &gt;(bool const &amp;, int const &amp;)&gt; const &amp;</type>
          <declname>MatchingConditions</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; const &amp;</type>
          <declname>ObjRef</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>MuRef</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nsteps</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para><ref refid="classapfel_1_1Dglap" kindref="compound">Dglap</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SplittingFunctions</parametername>
</parameternamelist>
<parameterdescription>
<para>set of splitting functions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MatchingConditions</parametername>
</parameternamelist>
<parameterdescription>
<para>set od matching conditions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ObjRef</parametername>
</parameternamelist>
<parameterdescription>
<para>reference object to be evolved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MuRef</parametername>
</parameternamelist>
<parameterdescription>
<para>reference scale from which the evolution starts </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsteps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of steps of the ODE solver (default: 10) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglap.h" line="35" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Dglap_1ac9f37328fb2680f5b1be74a279428972" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
        <definition>Set&lt;T&gt; apfel::Dglap&lt; T &gt;::MatchObject</definition>
        <argsstring>(bool const &amp;Up, int const &amp;nf, Set&lt; T &gt; const &amp;sd) const</argsstring>
        <name>MatchObject</name>
        <reimplements refid="classapfel_1_1MatchedEvolution_1a82f4e0ff82cd9b5f1e393625b4d81bc4">MatchObject</reimplements>
        <param>
          <type>bool const &amp;</type>
          <declname>Up</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; const &amp;</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>Function that matches the evolved object at the thresholds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Up</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the matching has to be done upward or backward </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nf</parametername>
</parameternamelist>
<parameterdescription>
<para>number of active flavours on this side of the threshold </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>object on this side of the threshold </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The matched object on the other side of the threshold. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglap.h" line="49" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Dglap_1a46be4761a1ba49003c8e93b32a842231" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
        <definition>Set&lt;T&gt; apfel::Dglap&lt; T &gt;::Derivative</definition>
        <argsstring>(int const &amp;nf, double const &amp;mu, Set&lt; T &gt; const &amp;f) const</argsstring>
        <name>Derivative</name>
        <reimplements refid="classapfel_1_1MatchedEvolution_1ae71ea51bdbbad54dad165eec66d4c49a">Derivative</reimplements>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>mu</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>This function returns the r.h.s. of the DGLAP equation, i.e. the convolution between splitting functions and distributions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nf</parametername>
</parameternamelist>
<parameterdescription>
<para>number of active flavours on this side of the threshold </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mu</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the factorisation scale </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>set of distributions at the scale mu </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The r.h.s. of the DGLAP equation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglap.h" line="60" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classapfel_1_1Dglap" kindref="compound">Dglap</ref> class is specialization class of the <ref refid="classapfel_1_1MatchedEvolution" kindref="compound">MatchedEvolution</ref> class for the computation of the DGLAP evolution. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>apfel::Dglap&lt; T &gt;</label>
        <link refid="classapfel_1_1Dglap"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>apfel::MatchedEvolution&lt; Set&lt; T &gt; &gt;</label>
        <link refid="classapfel_1_1MatchedEvolution"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>apfel::Dglap&lt; T &gt;</label>
        <link refid="classapfel_1_1Dglap"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::vector&lt; double &gt;</label>
      </node>
      <node id="2">
        <label>apfel::MatchedEvolution&lt; Set&lt; T &gt; &gt;</label>
        <link refid="classapfel_1_1MatchedEvolution"/>
        <childnode refid="3" relation="usage">
          <edgelabel>_LogThresholds2</edgelabel>
          <edgelabel>_Thresholds</edgelabel>
          <edgelabel>_Thresholds2</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="inc/apfel/dglap.h" line="21" column="3" bodyfile="inc/apfel/dglap.h" bodystart="22" bodyend="93"/>
    <listofallmembers>
      <member refid="classapfel_1_1MatchedEvolution_1a81fdc990b6c6c1fba5d4d424dbe12947" prot="protected" virt="non-virtual"><scope>apfel::Dglap</scope><name>_LogMuRef2</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1a83d38d00b2c4f62c1ea196febcc0a533" prot="protected" virt="non-virtual"><scope>apfel::Dglap</scope><name>_LogThresholds2</name></member>
      <member refid="classapfel_1_1Dglap_1a8934eb2e07103d88fd051610b5631f31" prot="private" virt="non-virtual"><scope>apfel::Dglap</scope><name>_MatchingConditions</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1af599dcd5f9f52f0d271aa15497c680d7" prot="protected" virt="non-virtual"><scope>apfel::Dglap</scope><name>_MuRef</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1aca6a5231a81ee5e40ba29f185d4c7890" prot="protected" virt="non-virtual"><scope>apfel::Dglap</scope><name>_MuRef2</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1a016c0e4076ad1f37e41eb2b6e4772cc1" prot="protected" virt="non-virtual"><scope>apfel::Dglap</scope><name>_nsteps</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1af2162e911beb35f80578121db1b84d97" prot="protected" virt="non-virtual"><scope>apfel::Dglap</scope><name>_ObjRef</name></member>
      <member refid="classapfel_1_1Dglap_1af722ff596c7beaaf23506d9983f4d52d" prot="private" virt="non-virtual"><scope>apfel::Dglap</scope><name>_SplittingFunctions</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1a345fedfefe33962f4f7ceb9b2f8638e8" prot="protected" virt="non-virtual"><scope>apfel::Dglap</scope><name>_Thresholds</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1af026d0e84560490983f5db02c6f55507" prot="protected" virt="non-virtual"><scope>apfel::Dglap</scope><name>_Thresholds2</name></member>
      <member refid="classapfel_1_1Dglap_1a46be4761a1ba49003c8e93b32a842231" prot="public" virt="virtual"><scope>apfel::Dglap</scope><name>Derivative</name></member>
      <member refid="classapfel_1_1Dglap_1a4abb8353b7d12194adbb327f7b11a560" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>Dglap</name></member>
      <member refid="classapfel_1_1Dglap_1ab35d51b5e877e37714377404b9dca5b7" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>Dglap</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1ab20faeee4e277e3835bd9b7c35f8bb23" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>Evaluate</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1af1c4e4e48f86ea639b21258a8abb996a" prot="public" virt="virtual"><scope>apfel::Dglap</scope><name>EvolveObject</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1a7f5ec01ccecc6d10729deae416fbf252" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>GetMuRef</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1ae76089a986554c934ba693d54b6c9749" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>GetNumberOfSteps</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1a07c814f74b2409272e157dc7f84c694a" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>GetObjectRef</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1aa110a35a3e5403a30f58ae59b6caa3d8" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>GetThresholds</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1adb2660fb7842ff7cfd1babfcdb2b0a05" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>MatchedEvolution</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1aebbd27d9fa7dc916378a4b4d726b5d26" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>MatchedEvolution</name></member>
      <member refid="classapfel_1_1Dglap_1ac9f37328fb2680f5b1be74a279428972" prot="public" virt="virtual"><scope>apfel::Dglap</scope><name>MatchObject</name></member>
      <member refid="classapfel_1_1Dglap_1a19ef0f9a007856ba1bd46f07dea5f93a" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>SetInitialDistributions</name></member>
      <member refid="classapfel_1_1Dglap_1a04933fdfd995c4c3efd63bd5d18729de" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>SetInitialDistributions</name></member>
      <member refid="classapfel_1_1Dglap_1a67f9c5ca05164c1ea2804341de2bced8" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>SetInitialDistributions</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1ae2bc1b1ea399fbba5009fb720aab159d" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>SetMuRef</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1ad60d84335c8dc3b8328a4ca4dfc7174d" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>SetNumberOfSteps</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1a4f9d5b0c8947a2aab79ecd3f04495485" prot="public" virt="non-virtual"><scope>apfel::Dglap</scope><name>SetObjectRef</name></member>
      <member refid="classapfel_1_1MatchedEvolution_1a0934c99a428f260789e7b78d4f784a80" prot="public" virt="virtual"><scope>apfel::Dglap</scope><name>~MatchedEvolution</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
