<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classapfel_1_1Integrator" kind="class" language="C++" prot="public">
    <compoundname>apfel::Integrator</compoundname>
    <includes refid="integrator_8h" local="no">integrator.h</includes>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <description><para>List of constructors. </para>
</description>
      <memberdef kind="function" id="classapfel_1_1Integrator_1a664f8704c32d7b50b3f85afbfd3c3533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Integrator::Integrator</definition>
        <argsstring>(std::function&lt; double(double const &amp;)&gt; const &amp;func)</argsstring>
        <name>Integrator</name>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classapfel_1_1Integrator" kindref="compound">Integrator</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function of one variable to be integrated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/integrator.h" line="30" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Integrator_1a923664bfb17fb4208482465ff74dfb36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Integrator::Integrator</definition>
        <argsstring>(std::function&lt; double(double const &amp;, double const &amp;)&gt; const &amp;func2, double const &amp;arg2)</argsstring>
        <name>Integrator</name>
        <param>
          <type>std::function&lt; double(double const &amp;, double const &amp;)&gt; const &amp;</type>
          <declname>func2</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classapfel_1_1Integrator" kindref="compound">Integrator</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func2</parametername>
</parameternamelist>
<parameterdescription>
<para>the function of two variables to be integrated over the first </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the second variable while integrating over the first </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/integrator.h" line="37" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Integrator_1afa61c8d98d61b769fa8eeaacbb901f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Integrator::Integrator</definition>
        <argsstring>(std::function&lt; double(double const &amp;, double const &amp;, double const &amp;)&gt; const &amp;func3, double const &amp;arg2, double const &amp;arg3)</argsstring>
        <name>Integrator</name>
        <param>
          <type>std::function&lt; double(double const &amp;, double const &amp;, double const &amp;)&gt; const &amp;</type>
          <declname>func3</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>arg2</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>arg3</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classapfel_1_1Integrator" kindref="compound">Integrator</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func3</parametername>
</parameternamelist>
<parameterdescription>
<para>the function of three variables to be integrated over the first </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the second variable while integrating over the first </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg3</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the third variable while integrating over the first </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/integrator.h" line="45" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classapfel_1_1Integrator_1a155dc87904d2035723fa06d80670a5f8" prot="private" static="no" mutable="no">
        <type>std::function&lt; double(double const  &amp;)&gt;</type>
        <definition>std::function&lt;double(double const&amp;)&gt; apfel::Integrator::_func</definition>
        <argsstring></argsstring>
        <name>_func</name>
        <briefdescription>
<para>The integrand function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/integrator.h" line="88" column="19" bodyfile="inc/apfel/integrator.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classapfel_1_1Integrator_1add54e5b8b4534d491e42eb3d56e322a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::Integrator::integrate</definition>
        <argsstring>(double const &amp;xmin, double const &amp;xmax, double const &amp;eps) const</argsstring>
        <name>integrate</name>
        <param>
          <type>double const &amp;</type>
          <declname>xmin</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>xmax</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
<para>Function that integrates the integrand with a given relative accuracy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmin</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound integration bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xmax</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound integration bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eps</parametername>
</parameternamelist>
<parameterdescription>
<para>the required relative accuracy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the integral </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/integrator.h" line="56" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Integrator_1a5c9d50d435897936339e1b9ec6ff609a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::Integrator::integrate</definition>
        <argsstring>(double const &amp;xmin, double const &amp;xmax, std::vector&lt; double &gt; const &amp;FixPts, double const &amp;eps) const</argsstring>
        <name>integrate</name>
        <param>
          <type>double const &amp;</type>
          <declname>xmin</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>xmax</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>FixPts</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
<para>Function that integrates the integrand with a given relative accuracy using a set of fixed point on the integration range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmin</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound integration bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xmax</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound integration bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FixPts</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of fixed points of the integration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eps</parametername>
</parameternamelist>
<parameterdescription>
<para>the required relative accuracy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the integral </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/integrator.h" line="68" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Integrator_1adf8c7312b39b8625cbd20ca7bf04240e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::Integrator::integrate</definition>
        <argsstring>(double const &amp;xmin, double const &amp;xmax, int const &amp;m) const</argsstring>
        <name>integrate</name>
        <param>
          <type>double const &amp;</type>
          <declname>xmin</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>xmax</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Function that integrates the integrand using a given number of point for the gauss quadrature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmin</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound integration bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xmax</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound integration bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>number of point of the Guass quadrature </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the integral </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/integrator.h" line="78" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Integrator_1a3f8eb6c449fca9e2891295277fae8b12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::Integrator::integrand</definition>
        <argsstring>(double const &amp;x) const</argsstring>
        <name>integrand</name>
        <param>
          <type>double const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function for the integrand. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the integrand evaluated at x </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/integrator.h" line="85" column="12" bodyfile="inc/apfel/integrator.h" bodystart="85" bodyend="85"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classapfel_1_1Integrator" kindref="compound">Integrator</ref> class perform unidimensional numerical integration using the Guassian quadrature. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="inc/apfel/integrator.h" line="18" column="3" bodyfile="inc/apfel/integrator.h" bodystart="19" bodyend="89"/>
    <listofallmembers>
      <member refid="classapfel_1_1Integrator_1a155dc87904d2035723fa06d80670a5f8" prot="private" virt="non-virtual"><scope>apfel::Integrator</scope><name>_func</name></member>
      <member refid="classapfel_1_1Integrator_1a3f8eb6c449fca9e2891295277fae8b12" prot="public" virt="non-virtual"><scope>apfel::Integrator</scope><name>integrand</name></member>
      <member refid="classapfel_1_1Integrator_1add54e5b8b4534d491e42eb3d56e322a9" prot="public" virt="non-virtual"><scope>apfel::Integrator</scope><name>integrate</name></member>
      <member refid="classapfel_1_1Integrator_1a5c9d50d435897936339e1b9ec6ff609a" prot="public" virt="non-virtual"><scope>apfel::Integrator</scope><name>integrate</name></member>
      <member refid="classapfel_1_1Integrator_1adf8c7312b39b8625cbd20ca7bf04240e" prot="public" virt="non-virtual"><scope>apfel::Integrator</scope><name>integrate</name></member>
      <member refid="classapfel_1_1Integrator_1a664f8704c32d7b50b3f85afbfd3c3533" prot="public" virt="non-virtual"><scope>apfel::Integrator</scope><name>Integrator</name></member>
      <member refid="classapfel_1_1Integrator_1a923664bfb17fb4208482465ff74dfb36" prot="public" virt="non-virtual"><scope>apfel::Integrator</scope><name>Integrator</name></member>
      <member refid="classapfel_1_1Integrator_1afa61c8d98d61b769fa8eeaacbb901f7d" prot="public" virt="non-virtual"><scope>apfel::Integrator</scope><name>Integrator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
