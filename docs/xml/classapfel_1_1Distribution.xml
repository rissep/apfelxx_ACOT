<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classapfel_1_1Distribution" kind="class" language="C++" prot="public">
    <compoundname>apfel::Distribution</compoundname>
    <basecompoundref refid="classapfel_1_1LagrangeInterpolator" prot="public" virt="non-virtual">apfel::LagrangeInterpolator</basecompoundref>
    <includes refid="distribution_8h" local="no">distribution.h</includes>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <description><para>List of constructors. </para>
</description>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a6eb5114b3ddb2cf00222226108c04d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Distribution::Distribution</definition>
        <argsstring>(Grid const &amp;g)</argsstring>
        <name>Distribution</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> constructors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> object that defines the x-space interpolation grid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="35" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1ae7861e19dabd709fc1be93903d8aca44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Distribution::Distribution</definition>
        <argsstring>(Distribution const &amp;obj)</argsstring>
        <name>Distribution</name>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> constructors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference distribution from wich the grid and the actual distributions are extracted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="41" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a09dae2441c6fd217136fb988f102681e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Distribution::Distribution</definition>
        <argsstring>(Distribution const &amp;obj, std::vector&lt; std::vector&lt; double &gt;&gt; const &amp;distsubgrid, std::vector&lt; double &gt; const &amp;distjointgrid)</argsstring>
        <name>Distribution</name>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> const &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; const &amp;</type>
          <declname>distsubgrid</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>distjointgrid</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> constructors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference distribution from wich the grid is extracted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distsubgrid</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of the distribution on the subgrids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distjointgrid</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of the distribution on the joint grid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="49" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a1bfcf24a76574d88fcd53bf699403fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Distribution::Distribution</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; std::vector&lt; double &gt;&gt; const &amp;distsubgrid, std::vector&lt; double &gt; const &amp;distjointgrid)</argsstring>
        <name>Distribution</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; const &amp;</type>
          <declname>distsubgrid</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>distjointgrid</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> constructors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> object that defines the x-space interpolation grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distsubgrid</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of the distribution on the subgrids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distjointgrid</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of the distribution on the joint grid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="59" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a6ac74270d05fc0abce79222c8ebde08d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Distribution::Distribution</definition>
        <argsstring>(Grid const &amp;g, std::function&lt; double(double const &amp;)&gt; const &amp;InDistFunc)</argsstring>
        <name>Distribution</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>InDistFunc</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> constructors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> object that defines the x-space interpolation grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDistFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>a function of x to be tabulated on the grid in x </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="68" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1ae658dd249c93fabd3a98f631d90f1b61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Distribution::Distribution</definition>
        <argsstring>(Grid const &amp;g, std::function&lt; double(double const &amp;, double const &amp;)&gt; const &amp;InDistFunc, double const &amp;Q)</argsstring>
        <name>Distribution</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;, double const &amp;)&gt; const &amp;</type>
          <declname>InDistFunc</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>Q</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> constructors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> object that defines the x-space interpolation grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDistFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>a function of x and Q to be tabulated on the grid in x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of Q in which InDistFunc has to be tabulated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="77" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a139249bbd4e1fcadb4da31b97deb64f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Distribution::Distribution</definition>
        <argsstring>(Grid const &amp;g, std::function&lt; double(int const &amp;, double const &amp;)&gt; const &amp;InDistFunc, int const &amp;ipdf)</argsstring>
        <name>Distribution</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::function&lt; double(int const &amp;, double const &amp;)&gt; const &amp;</type>
          <declname>InDistFunc</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>ipdf</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> constructors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> object that defines the x-space interpolation grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDistFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>a function of ipdf and x to be tabulated on the grid in x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipdf</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of ipdf in which InDistFunc has to be tabulated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="87" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a3ca72558f6ecae515ae8e1b7552392b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Distribution::Distribution</definition>
        <argsstring>(Grid const &amp;g, std::function&lt; double(int const &amp;, double const &amp;, double const &amp;)&gt; const &amp;InDistFunc, int const &amp;ipdf, double const &amp;Q)</argsstring>
        <name>Distribution</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::function&lt; double(int const &amp;, double const &amp;, double const &amp;)&gt; const &amp;</type>
          <declname>InDistFunc</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>ipdf</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>Q</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> constructors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> object that defines the x-space interpolation grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDistFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>a function of ipdf, x, and Q to be tabulated on the grid in x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipdf</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of ipdf in which InDistFunc has to be tabulated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of Q in which InDistFunc has to be tabulated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="98" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Binary operators</header>
      <memberdef kind="function" id="classapfel_1_1Distribution_1afc3f3a79d7a62b78f771f2da1c40d895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &amp;</type>
        <definition>Distribution&amp; apfel::Distribution::operator=</definition>
        <argsstring>(Distribution const &amp;d)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> const &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>this = <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="129" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a32966406545ec7468a61919de32e6618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &amp;</type>
        <definition>Distribution&amp; apfel::Distribution::operator*=</definition>
        <argsstring>(double const &amp;s)</argsstring>
        <name>operator*=</name>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>this *= Scalar </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="130" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a6ecc6a91181e175a68563b1e6735afbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &amp;</type>
        <definition>Distribution&amp; apfel::Distribution::operator*=</definition>
        <argsstring>(std::function&lt; double(double const &amp;)&gt; const &amp;f)</argsstring>
        <name>operator*=</name>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>this *= Function of the integration variable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="131" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a9c8f28c2f1e380d5b644e42fc2f92d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &amp;</type>
        <definition>Distribution&amp; apfel::Distribution::operator/=</definition>
        <argsstring>(double const &amp;s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>this /= Scalar </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="132" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a7e24a592d0165d66299538afe5da8e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &amp;</type>
        <definition>Distribution&amp; apfel::Distribution::operator*=</definition>
        <argsstring>(Distribution const &amp;d)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> const &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>this *= <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="133" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a13119190ad7f2fcca1d7f1f3e3517421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &amp;</type>
        <definition>Distribution&amp; apfel::Distribution::operator+=</definition>
        <argsstring>(Distribution const &amp;d)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> const &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>this += <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="134" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a91eff7090551a78e47bbaf69a4277540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &amp;</type>
        <definition>Distribution&amp; apfel::Distribution::operator-=</definition>
        <argsstring>(Distribution const &amp;d)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> const &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>this -= <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="135" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classapfel_1_1Distribution_1af477a2ffcc422a241a5860ea2caf3949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Distribution::Distribution</definition>
        <argsstring>()=delete</argsstring>
        <name>Distribution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="24" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a66c033d0c916523ea0f75f16c09985f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apfel::Distribution::SetJointGrid</definition>
        <argsstring>(int const &amp;ix, double const &amp;x)</argsstring>
        <name>SetJointGrid</name>
        <param>
          <type>int const &amp;</type>
          <declname>ix</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function to set the values of the joint grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ix</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>value of of the distribution to set in the distribution vector on the joint grid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="109" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a3069e9152cabf4d463773b698fd8d323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apfel::Distribution::SetSubGrid</definition>
        <argsstring>(int const &amp;ig, int const &amp;ix, double const &amp;x)</argsstring>
        <name>SetSubGrid</name>
        <param>
          <type>int const &amp;</type>
          <declname>ig</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>ix</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function to push back the values of the subgrid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ig</parametername>
</parameternamelist>
<parameterdescription>
<para>the subgrid index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ix</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>value of of the distribution to set in the distribution vector on the joint grid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="117" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Distribution_1a6157460d3b27acf31c28d289a9e0d55b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution apfel::Distribution::Derivative</definition>
        <argsstring>() const</argsstring>
        <name>Derivative</name>
        <briefdescription>
<para>Function that returns the derivative of the <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> in the form of a <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="123" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> class defines one of the basic objects of APFEL++. This is essentially the discretisation of a function that can be conveniently used for convolutions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>apfel::LagrangeInterpolator</label>
        <link refid="classapfel_1_1LagrangeInterpolator"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>apfel::Interpolator</label>
        <link refid="classapfel_1_1Interpolator"/>
      </node>
      <node id="1">
        <label>apfel::Distribution</label>
        <link refid="classapfel_1_1Distribution"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7">
        <label>std::vector&lt; std::pair&lt; int, int &gt; &gt;</label>
      </node>
      <node id="10">
        <label>std::vector&lt; double &gt;</label>
      </node>
      <node id="4">
        <label>apfel::Grid</label>
        <link refid="classapfel_1_1Grid"/>
        <childnode refid="5" relation="usage">
          <edgelabel>_JointToSubMap</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>_SubToJointMap</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>_JointGrid</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>_GlobalGrid</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::unique_ptr&lt; apfel::SubGrid &gt;</label>
        <childnode refid="9" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::vector&lt; std::vector&lt; double &gt; &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::vector&lt; std::vector&lt; int &gt; &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::vector&lt; apfel::SubGrid &gt;</label>
        <childnode refid="9" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>apfel::SubGrid</label>
        <link refid="classapfel_1_1SubGrid"/>
        <childnode refid="10" relation="usage">
          <edgelabel>_lxsg</edgelabel>
          <edgelabel>_xsg</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>apfel::LagrangeInterpolator</label>
        <link refid="classapfel_1_1LagrangeInterpolator"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>apfel::Interpolator</label>
        <link refid="classapfel_1_1Interpolator"/>
        <childnode refid="4" relation="usage">
          <edgelabel>_grid</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>_distributionSubGrid</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>_distributionJointGrid</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>apfel::Distribution</label>
        <link refid="classapfel_1_1Distribution"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>std::vector&lt; int &gt;</label>
      </node>
    </collaborationgraph>
    <location file="inc/apfel/distribution.h" line="21" column="3" bodyfile="inc/apfel/distribution.h" bodystart="22" bodyend="137"/>
    <listofallmembers>
      <member refid="classapfel_1_1Interpolator_1a9054c97a66105a3af624834ea49ab3d5" prot="protected" virt="non-virtual"><scope>apfel::Distribution</scope><name>_distributionJointGrid</name></member>
      <member refid="classapfel_1_1Interpolator_1a08d213653646c8598d07aae2ae6afcff" prot="protected" virt="non-virtual"><scope>apfel::Distribution</scope><name>_distributionSubGrid</name></member>
      <member refid="classapfel_1_1Interpolator_1a6a98ca87f7d781661a98038e753c1c27" prot="protected" virt="non-virtual"><scope>apfel::Distribution</scope><name>_grid</name></member>
      <member refid="classapfel_1_1LagrangeInterpolator_1ad829c2abc855b9dc2b72f7ceaf5cf564" prot="public" virt="virtual"><scope>apfel::Distribution</scope><name>DerInterpolant</name></member>
      <member refid="classapfel_1_1Distribution_1a6157460d3b27acf31c28d289a9e0d55b" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Derivative</name></member>
      <member refid="classapfel_1_1Interpolator_1a4089ff67183effbcecf877e898dde0bd" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Derive</name></member>
      <member refid="classapfel_1_1Distribution_1af477a2ffcc422a241a5860ea2caf3949" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Distribution</name></member>
      <member refid="classapfel_1_1Distribution_1a6eb5114b3ddb2cf00222226108c04d07" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Distribution</name></member>
      <member refid="classapfel_1_1Distribution_1ae7861e19dabd709fc1be93903d8aca44" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Distribution</name></member>
      <member refid="classapfel_1_1Distribution_1a09dae2441c6fd217136fb988f102681e" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Distribution</name></member>
      <member refid="classapfel_1_1Distribution_1a1bfcf24a76574d88fcd53bf699403fa5" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Distribution</name></member>
      <member refid="classapfel_1_1Distribution_1a6ac74270d05fc0abce79222c8ebde08d" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Distribution</name></member>
      <member refid="classapfel_1_1Distribution_1ae658dd249c93fabd3a98f631d90f1b61" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Distribution</name></member>
      <member refid="classapfel_1_1Distribution_1a139249bbd4e1fcadb4da31b97deb64f6" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Distribution</name></member>
      <member refid="classapfel_1_1Distribution_1a3ca72558f6ecae515ae8e1b7552392b3" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Distribution</name></member>
      <member refid="classapfel_1_1Interpolator_1aaa04fd13b61de9eca4bce12c4afd8e97" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Evaluate</name></member>
      <member refid="classapfel_1_1Interpolator_1a0a02b02f3a9b75647af7b64da7057c4a" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Evaluate</name></member>
      <member refid="classapfel_1_1Interpolator_1af7486f60789a0135fe4e2107ce0221dd" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>GetDistributionJointGrid</name></member>
      <member refid="classapfel_1_1Interpolator_1ad9b3ce90a94c82a043362b0c68bee398" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>GetDistributionSubGrid</name></member>
      <member refid="classapfel_1_1Interpolator_1a9a2ca32b709976d46aadcff895ec1be8" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>GetGrid</name></member>
      <member refid="classapfel_1_1Interpolator_1afabd876ece0e971616bbc0f950419156" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Integrate</name></member>
      <member refid="classapfel_1_1LagrangeInterpolator_1ab5f774f33176ece373a77a814c914b73" prot="public" virt="virtual"><scope>apfel::Distribution</scope><name>Interpolant</name></member>
      <member refid="classapfel_1_1LagrangeInterpolator_1aa27376e2b20c645a57df5e808270bd13" prot="public" virt="virtual"><scope>apfel::Distribution</scope><name>InterpolantLog</name></member>
      <member refid="classapfel_1_1Interpolator_1a829c8b174a5e9a12b20b927bb46a7279" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Interpolator</name></member>
      <member refid="classapfel_1_1Interpolator_1a1fadb1d59ddfd5f4166c0ebde878ae99" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>Interpolator</name></member>
      <member refid="classapfel_1_1LagrangeInterpolator_1ac685eca21fc99696b8fb8dee1f5248c5" prot="public" virt="virtual"><scope>apfel::Distribution</scope><name>IntInterpolant</name></member>
      <member refid="classapfel_1_1LagrangeInterpolator_1a4a76db9cfe06212cbd316b42f8d9091e" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>LagrangeInterpolator</name></member>
      <member refid="classapfel_1_1LagrangeInterpolator_1adf969215fdb539554f677a92e83519db" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>LagrangeInterpolator</name></member>
      <member refid="classapfel_1_1Distribution_1a32966406545ec7468a61919de32e6618" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>operator*=</name></member>
      <member refid="classapfel_1_1Distribution_1a6ecc6a91181e175a68563b1e6735afbb" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>operator*=</name></member>
      <member refid="classapfel_1_1Distribution_1a7e24a592d0165d66299538afe5da8e2a" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>operator*=</name></member>
      <member refid="classapfel_1_1Distribution_1a13119190ad7f2fcca1d7f1f3e3517421" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>operator+=</name></member>
      <member refid="classapfel_1_1Distribution_1a91eff7090551a78e47bbaf69a4277540" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>operator-=</name></member>
      <member refid="classapfel_1_1Distribution_1a9c8f28c2f1e380d5b644e42fc2f92d8b" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>operator/=</name></member>
      <member refid="classapfel_1_1Distribution_1afc3f3a79d7a62b78f771f2da1c40d895" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>operator=</name></member>
      <member refid="classapfel_1_1Distribution_1a66c033d0c916523ea0f75f16c09985f8" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>SetJointGrid</name></member>
      <member refid="classapfel_1_1Distribution_1a3069e9152cabf4d463773b698fd8d323" prot="public" virt="non-virtual"><scope>apfel::Distribution</scope><name>SetSubGrid</name></member>
      <member refid="classapfel_1_1LagrangeInterpolator_1a1937891f73add6ac97b543c4e291308d" prot="public" virt="virtual"><scope>apfel::Distribution</scope><name>SumBounds</name></member>
      <member refid="classapfel_1_1Interpolator_1abcf14478694c9385f568a4fd69a0fe67" prot="public" virt="virtual"><scope>apfel::Distribution</scope><name>~Interpolator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
