<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classapfel_1_1Set" kind="class" language="C++" prot="public">
    <compoundname>apfel::Set</compoundname>
    <includes refid="set_8h" local="no">set.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Binary operators</header>
      <memberdef kind="function" id="classapfel_1_1Set_1a7b755b9fba673874d326b15a561194d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; V &gt;</type>
        <definition>Set&lt;V&gt; apfel::Set&lt; T &gt;::operator*=</definition>
        <argsstring>(Set&lt; V &gt; const &amp;d) const</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; V &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>operator *= product object </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the left hand side object of type V </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new object of type V </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="40" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Set_1aad80840ee491a1fe71888446cf2b965d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; &amp;</type>
        <definition>Set&lt;T&gt;&amp; apfel::Set&lt; T &gt;::operator*=</definition>
        <argsstring>(double const &amp;s)</argsstring>
        <name>operator*=</name>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>this *= scalar </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="42" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Set_1a248c92f1611b23cd613af23f0f4c7131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; &amp;</type>
        <definition>Set&lt;T&gt;&amp; apfel::Set&lt; T &gt;::operator*=</definition>
        <argsstring>(std::function&lt; double(double const &amp;)&gt; f)</argsstring>
        <name>operator*=</name>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>this *= function of the integration variable (for distributions only) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="43" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Set_1a7fdd7c169f643636748d44c832c0481b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; &amp;</type>
        <definition>Set&lt;T&gt;&amp; apfel::Set&lt; T &gt;::operator*=</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;v)</argsstring>
        <name>operator*=</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>this *= vector of scalars </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="44" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Set_1a7309377f46892a67744d42c8c971287c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; &amp;</type>
        <definition>Set&lt;T&gt;&amp; apfel::Set&lt; T &gt;::operator/=</definition>
        <argsstring>(double const &amp;s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>this /= scalar </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="45" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Set_1aee784b4f58bfc1815ce2f26f1879654d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; &amp;</type>
        <definition>Set&lt;T&gt;&amp; apfel::Set&lt; T &gt;::operator+=</definition>
        <argsstring>(Set&lt; T &gt; const &amp;d)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>this += <ref refid="classapfel_1_1Set" kindref="compound">Set</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="46" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Set_1af6ff99865195bca63bbee4ef08b7be74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; &amp;</type>
        <definition>Set&lt;T&gt;&amp; apfel::Set&lt; T &gt;::operator-=</definition>
        <argsstring>(Set&lt; T &gt; const &amp;d)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>this -= <ref refid="classapfel_1_1Set" kindref="compound">Set</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="47" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Getters</header>
      <memberdef kind="function" id="classapfel_1_1Set_1adc221d1fbd6323776a3c07408db8bd24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T const  &amp;</type>
        <definition>T const&amp; apfel::Set&lt; T &gt;::at</definition>
        <argsstring>(int const &amp;id) const</argsstring>
        <name>at</name>
        <param>
          <type>int const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>This returns object with ID &quot;id&quot; in the map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="57" column="13" bodyfile="inc/apfel/set.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Set_1afc73d4b081d55684b256e840b73d151d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classapfel_1_1ConvolutionMap" kindref="compound">ConvolutionMap</ref> const  &amp;</type>
        <definition>ConvolutionMap const&amp; apfel::Set&lt; T &gt;::GetMap</definition>
        <argsstring>() const</argsstring>
        <name>GetMap</name>
        <briefdescription>
<para>This returns the convolution map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="61" column="26" bodyfile="inc/apfel/set.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Set_1a38e7fdcce8429e6f6066c9b0af60cc08" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::map&lt; int, T &gt; const  &amp;</type>
        <definition>std::map&lt;int, T&gt; const&amp; apfel::Set&lt; T &gt;::GetObjects</definition>
        <argsstring>() const</argsstring>
        <name>GetObjects</name>
        <briefdescription>
<para>This returns the full map of objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="65" column="20" bodyfile="inc/apfel/set.h" bodystart="65" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classapfel_1_1Set_1a271510f77a70002dc352648a41867307" prot="private" static="no" mutable="no">
        <type><ref refid="classapfel_1_1ConvolutionMap" kindref="compound">ConvolutionMap</ref></type>
        <definition>ConvolutionMap apfel::Set&lt; T &gt;::_map</definition>
        <argsstring></argsstring>
        <name>_map</name>
        <briefdescription>
<para>The shared pointer containing the convolution map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="91" column="22" bodyfile="inc/apfel/set.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classapfel_1_1Set_1ac26612986822c3154a3e39dd487f5d40" prot="private" static="no" mutable="no">
        <type>std::map&lt; int, T &gt;</type>
        <definition>std::map&lt;int, T&gt; apfel::Set&lt; T &gt;::_objects</definition>
        <argsstring></argsstring>
        <name>_objects</name>
        <briefdescription>
<para>The container for the map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="92" column="14" bodyfile="inc/apfel/set.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classapfel_1_1Set_1afe0583488cebd90db88770e907a1d2d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::Set&lt; T &gt;::Set</definition>
        <argsstring>(ConvolutionMap const &amp;Map, std::map&lt; int, T &gt; const &amp;in)</argsstring>
        <name>Set</name>
        <param>
          <type><ref refid="classapfel_1_1ConvolutionMap" kindref="compound">ConvolutionMap</ref> const &amp;</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>std::map&lt; int, T &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classapfel_1_1Set" kindref="compound">Set</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Map</parametername>
</parameternamelist>
<parameterdescription>
<para>the convolution map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>a map of objects of type T </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="29" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Set_1ac2b7cfa13e427b34727d36c9ba28feb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void apfel::Set&lt; T &gt;::SetMap</definition>
        <argsstring>(ConvolutionMap const &amp;map)</argsstring>
        <name>SetMap</name>
        <param>
          <type><ref refid="classapfel_1_1ConvolutionMap" kindref="compound">ConvolutionMap</ref> const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>This function (re)sets the convolution map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="71" column="10" bodyfile="inc/apfel/set.h" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Set_1a7b3aa798e80a7b08b52ac7e2fe5e5347" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void apfel::Set&lt; T &gt;::SetObjects</definition>
        <argsstring>(std::map&lt; int, T &gt; const &amp;objects)</argsstring>
        <name>SetObjects</name>
        <param>
          <type>std::map&lt; int, T &gt; const &amp;</type>
          <declname>objects</declname>
        </param>
        <briefdescription>
<para>This function (re)sets the map of objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="76" column="10" bodyfile="inc/apfel/set.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Set_1a7065697bdd240416184fee23592c77fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T apfel::Set&lt; T &gt;::Combine</definition>
        <argsstring>() const</argsstring>
        <name>Combine</name>
        <briefdescription>
<para>This function sums up all the objects of the set into one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="82" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1Set_1a339d0b1d03e094ec494f1c06b7dacde2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T apfel::Set&lt; T &gt;::Combine</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;weigths) const</argsstring>
        <name>Combine</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>weigths</declname>
        </param>
        <briefdescription>
<para>This function sums up all the objects of the set into one using the components of input vactor for as weights. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="88" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classapfel_1_1Set_1ae2cb3103d4459526d6812a5666485441" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, Set&lt; U &gt; const &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; U &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="95" column="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classapfel_1_1Set" kindref="compound">Set</ref> template class allocates a collection of objects of type T along the <ref refid="classapfel_1_1ConvolutionMap" kindref="compound">ConvolutionMap</ref> and provides the methods to perform operations between different types of objects T. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>apfel::ConvolutionMap</label>
        <link refid="classapfel_1_1ConvolutionMap"/>
        <childnode refid="3" relation="usage">
          <edgelabel>_rules</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>_name</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>T</label>
      </node>
      <node id="7">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="8">
        <label>std::map&lt; int, T &gt;</label>
        <childnode refid="9" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; apfel::ConvolutionMap::rule &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::map&lt; int, std::vector&lt; apfel::ConvolutionMap::rule &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>apfel::Set&lt; T &gt;</label>
        <link refid="classapfel_1_1Set"/>
        <childnode refid="2" relation="usage">
          <edgelabel>_map</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>_objects</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>apfel::ConvolutionMap::rule</label>
        <link refid="structapfel_1_1ConvolutionMap_1_1rule"/>
      </node>
      <node id="6">
        <label>std::string</label>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="inc/apfel/set.h" line="21" column="3" bodyfile="inc/apfel/set.h" bodystart="22" bodyend="96"/>
    <listofallmembers>
      <member refid="classapfel_1_1Set_1a271510f77a70002dc352648a41867307" prot="private" virt="non-virtual"><scope>apfel::Set</scope><name>_map</name></member>
      <member refid="classapfel_1_1Set_1ac26612986822c3154a3e39dd487f5d40" prot="private" virt="non-virtual"><scope>apfel::Set</scope><name>_objects</name></member>
      <member refid="classapfel_1_1Set_1adc221d1fbd6323776a3c07408db8bd24" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>at</name></member>
      <member refid="classapfel_1_1Set_1a7065697bdd240416184fee23592c77fa" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>Combine</name></member>
      <member refid="classapfel_1_1Set_1a339d0b1d03e094ec494f1c06b7dacde2" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>Combine</name></member>
      <member refid="classapfel_1_1Set_1afc73d4b081d55684b256e840b73d151d" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>GetMap</name></member>
      <member refid="classapfel_1_1Set_1a38e7fdcce8429e6f6066c9b0af60cc08" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>GetObjects</name></member>
      <member refid="classapfel_1_1Set_1a7b755b9fba673874d326b15a561194d7" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>operator*=</name></member>
      <member refid="classapfel_1_1Set_1aad80840ee491a1fe71888446cf2b965d" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>operator*=</name></member>
      <member refid="classapfel_1_1Set_1a248c92f1611b23cd613af23f0f4c7131" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>operator*=</name></member>
      <member refid="classapfel_1_1Set_1a7fdd7c169f643636748d44c832c0481b" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>operator*=</name></member>
      <member refid="classapfel_1_1Set_1aee784b4f58bfc1815ce2f26f1879654d" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>operator+=</name></member>
      <member refid="classapfel_1_1Set_1af6ff99865195bca63bbee4ef08b7be74" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>operator-=</name></member>
      <member refid="classapfel_1_1Set_1a7309377f46892a67744d42c8c971287c" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>operator/=</name></member>
      <member refid="classapfel_1_1Set_1ae2cb3103d4459526d6812a5666485441" prot="private" virt="non-virtual"><scope>apfel::Set</scope><name>operator&lt;&lt;</name></member>
      <member refid="classapfel_1_1Set_1afe0583488cebd90db88770e907a1d2d2" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>Set</name></member>
      <member refid="classapfel_1_1Set_1ac2b7cfa13e427b34727d36c9ba28feb1" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>SetMap</name></member>
      <member refid="classapfel_1_1Set_1a7b3aa798e80a7b08b52ac7e2fe5e5347" prot="public" virt="non-virtual"><scope>apfel::Set</scope><name>SetObjects</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
