<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="distribution_test_8cc-example" kind="example">
    <compoundname>distribution_test.cc</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename="distribution_test.cc"><codeline><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>APFEL++<sp/>2017</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>Valerio<sp/>Bertone:<sp/>valerio.bertone@cern.ch</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="apfelxx_8h" kindref="compound">apfel/apfelxx.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>to<sp/>define<sp/>the<sp/>analytical<sp/>expression<sp/>of<sp/>LO<sp/>splitting<sp/>function<sp/>P0qq</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">p0qq:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Expression" kindref="compound">apfel::Expression</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>p0qq():<sp/>Expression()<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Expression_1aef54ac003702b1cc7d2d573c484d76a1" kindref="member">Regular</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x)</highlight><highlight class="keyword"><sp/><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<sp/>2<sp/>*<sp/><ref refid="group__MathConstants_1ga687ec16c12edc12df465398573b42d47" kindref="member">apfel::CF</ref><sp/>*<sp/>(<sp/>1<sp/>+<sp/>x<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Expression_1ac5e2173392700a61ec15959412d1f2f3" kindref="member">Singular</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4<sp/>*<sp/><ref refid="group__MathConstants_1ga687ec16c12edc12df465398573b42d47" kindref="member">apfel::CF</ref><sp/>/<sp/>(<sp/>1<sp/>-<sp/>x<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Expression_1a235668b9dd1d209ce756f1c250e7da3b" kindref="member">Local</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x)</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4<sp/>*<sp/><ref refid="group__MathConstants_1ga687ec16c12edc12df465398573b42d47" kindref="member">apfel::CF</ref><sp/>*<sp/>log(<sp/>1<sp/>-<sp/>x<sp/>)<sp/>+<sp/>3<sp/>*<sp/><ref refid="group__MathConstants_1ga687ec16c12edc12df465398573b42d47" kindref="member">apfel::CF</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>to<sp/>define<sp/>the<sp/>analytical<sp/>expression<sp/>of<sp/>the<sp/>squared<sp/>LO<sp/>splitting<sp/>function<sp/>P0qq</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">p0qq2:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Expression" kindref="compound">apfel::Expression</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>p0qq2():<sp/>Expression()<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Expression_1aef54ac003702b1cc7d2d573c484d76a1" kindref="member">Regular</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x)</highlight><highlight class="keyword"><sp/><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4<sp/>*<sp/><ref refid="group__MathConstants_1ga687ec16c12edc12df465398573b42d47" kindref="member">apfel::CF</ref><sp/>*<sp/><ref refid="group__MathConstants_1ga687ec16c12edc12df465398573b42d47" kindref="member">apfel::CF</ref><sp/>*<sp/>(<sp/>-<sp/>4<sp/>*<sp/>log(x)<sp/>/<sp/>(<sp/>1<sp/>-<sp/>x<sp/>)<sp/>-<sp/>4<sp/>*<sp/>(<sp/>1<sp/>+<sp/>x<sp/>)<sp/>*<sp/>log(<sp/>1<sp/>-<sp/>x<sp/>)<sp/>+<sp/>3<sp/>*<sp/>(<sp/>1<sp/>+<sp/>x<sp/>)<sp/>*<sp/>log(x)<sp/>-<sp/>(<sp/>x<sp/>+<sp/>5<sp/>)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Expression_1ac5e2173392700a61ec15959412d1f2f3" kindref="member">Singular</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4<sp/>*<sp/><ref refid="group__MathConstants_1ga687ec16c12edc12df465398573b42d47" kindref="member">apfel::CF</ref><sp/>*<sp/><ref refid="group__MathConstants_1ga687ec16c12edc12df465398573b42d47" kindref="member">apfel::CF</ref><sp/>*<sp/>(<sp/>8<sp/>*<sp/>log(<sp/>1<sp/>-<sp/>x<sp/>)<sp/>+<sp/>6<sp/>)<sp/>/<sp/>(<sp/>1<sp/>-<sp/>x<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Expression_1a235668b9dd1d209ce756f1c250e7da3b" kindref="member">Local</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x)</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4<sp/>*<sp/><ref refid="group__MathConstants_1ga687ec16c12edc12df465398573b42d47" kindref="member">apfel::CF</ref><sp/>*<sp/><ref refid="group__MathConstants_1ga687ec16c12edc12df465398573b42d47" kindref="member">apfel::CF</ref><sp/>*<sp/>(<sp/>4<sp/>*<sp/>pow(log(<sp/>1<sp/>-<sp/>x<sp/>),2)<sp/>+<sp/>6<sp/>*<sp/>log(<sp/>1<sp/>-<sp/>x<sp/>)<sp/>+<sp/>9.<sp/>/<sp/>4.<sp/>-<sp/>4<sp/>*<sp/>pow(M_PI,2)<sp/>/<sp/>6.<sp/>)<sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classapfel_1_1Timer" kindref="compound">apfel::Timer</ref><sp/>t;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Grid</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Grid" kindref="compound">apfel::Grid</ref><sp/>g{{<ref refid="classapfel_1_1SubGrid" kindref="compound">apfel::SubGrid</ref>{80,1e-5,3},<sp/><ref refid="classapfel_1_1SubGrid" kindref="compound">apfel::SubGrid</ref>{50,1e-1,3},<sp/><ref refid="classapfel_1_1SubGrid" kindref="compound">apfel::SubGrid</ref>{40,8e-1,3}}};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Distribution</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Distribution" kindref="compound">apfel::Distribution</ref><sp/>d{g,<sp/>[&amp;]<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>-<sp/>x;<sp/>}};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>distribution</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>d;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expression</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p0qq<sp/>p;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Operator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nInitialization<sp/>...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a8b8ffd3f8ceb45b50ecd2d7b00f84ccb" kindref="member">start</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Operator" kindref="compound">apfel::Operator</ref><sp/>O{g,<sp/>p};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a015b2c516bb668f392faa6d0a5eae3c1" kindref="member">stop</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>operator<sp/>by<sp/>the<sp/>distribution<sp/>to<sp/>create<sp/>a<sp/>new<sp/>distribution</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nConvolution<sp/>between<sp/>operator<sp/>and<sp/>distribution<sp/>(O<sp/>*<sp/>d)<sp/>...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a8b8ffd3f8ceb45b50ecd2d7b00f84ccb" kindref="member">start</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Distribution" kindref="compound">apfel::Distribution</ref><sp/>Od<sp/>=<sp/>O<sp/>*<sp/>d;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a015b2c516bb668f392faa6d0a5eae3c1" kindref="member">stop</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>operator<sp/>by<sp/>itself<sp/>to<sp/>create<sp/>a<sp/>new<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nConvolution<sp/>between<sp/>two<sp/>operators<sp/>(O<sp/>*<sp/>O)<sp/>...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a8b8ffd3f8ceb45b50ecd2d7b00f84ccb" kindref="member">start</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Operator" kindref="compound">apfel::Operator</ref><sp/>OO<sp/>=<sp/>O<sp/>*<sp/>O;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classapfel_1_1Timer_1a015b2c516bb668f392faa6d0a5eae3c1" kindref="member">stop</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>numerical<sp/>accuracy<sp/>of<sp/>&quot;Od&quot;<sp/>by<sp/>comparing<sp/>with<sp/>the<sp/>analytical<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nChecking<sp/>the<sp/>numerical<sp/>accuracy<sp/>of<sp/>O<sp/>*<sp/>d<sp/>...<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::scientific;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;=<sp/>g.GetJointGrid().nx();<sp/>ix++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>g.GetJointGrid().GetGrid()[ix];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Analytic<sp/>result<sp/>for<sp/>x<sp/>\int_x^1<sp/>dy<sp/>Pqq(y)<sp/>(<sp/>1<sp/>-<sp/>x<sp/>/<sp/>y<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ix<sp/>=<sp/><ref refid="group__MathConstants_1ga687ec16c12edc12df465398573b42d47" kindref="member">apfel::CF</ref><sp/>*<sp/>(<sp/>-<sp/>2<sp/>*<sp/>(<sp/>3.<sp/>/<sp/>2.<sp/>-<sp/>x<sp/>-<sp/>pow(x,2)<sp/>/<sp/>2.<sp/>)<sp/>+<sp/>4<sp/>*<sp/>(<sp/>1<sp/>-<sp/>x<sp/>)<sp/>*<sp/>log(<sp/>1<sp/>-<sp/><sp/>x<sp/>)<sp/>+<sp/>3<sp/>*<sp/>(<sp/>1<sp/>-<sp/>x<sp/>)<sp/>+<sp/>2<sp/>*<sp/>x<sp/>*<sp/>(<sp/>log(x)<sp/>+<sp/>1<sp/>-<sp/>x<sp/>)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Od.<ref refid="classapfel_1_1Interpolator_1aaa04fd13b61de9eca4bce12c4afd8e97" kindref="member">Evaluate</ref>(x)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Ix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Od.<ref refid="classapfel_1_1Interpolator_1aaa04fd13b61de9eca4bce12c4afd8e97" kindref="member">Evaluate</ref>(x)<sp/>/<sp/>Ix<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>numerical<sp/>accuracy<sp/>of<sp/>&quot;Od&quot;<sp/>by<sp/>comparing<sp/>with<sp/>the<sp/>analytical<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Analytical<sp/>expression<sp/>of<sp/>P0qq<sp/>\otimes<sp/>P0qq</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p0qq2<sp/>p2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Operator" kindref="compound">apfel::Operator</ref><sp/>O2{g,<sp/>p2};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>convolute<sp/>both<sp/>&quot;OO&quot;<sp/>and<sp/>&quot;O2&quot;<sp/>with<sp/>the<sp/>test<sp/>distribution<sp/>&quot;d&quot;<sp/>and<sp/>check<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Distribution" kindref="compound">apfel::Distribution</ref><sp/>OOd<sp/>=<sp/>OO<sp/>*<sp/>d;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1Distribution" kindref="compound">apfel::Distribution</ref><sp/>O2d<sp/>=<sp/>O2<sp/>*<sp/>d;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nChecking<sp/>the<sp/>numerical<sp/>accuracy<sp/>of<sp/>O<sp/>*<sp/>O<sp/>...<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;=<sp/>g.GetJointGrid().nx();<sp/>ix++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>g.GetJointGrid().<ref refid="classapfel_1_1Interpolator_1a9a2ca32b709976d46aadcff895ec1be8" kindref="member">GetGrid</ref>()[ix];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>OOd.<ref refid="classapfel_1_1Interpolator_1aaa04fd13b61de9eca4bce12c4afd8e97" kindref="member">Evaluate</ref>(x)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>O2d.<ref refid="classapfel_1_1Interpolator_1aaa04fd13b61de9eca4bce12c4afd8e97" kindref="member">Evaluate</ref>(x)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>OOd.<ref refid="classapfel_1_1Interpolator_1aaa04fd13b61de9eca4bce12c4afd8e97" kindref="member">Evaluate</ref>(x)<sp/>/<sp/>O2d.<ref refid="classapfel_1_1Interpolator_1aaa04fd13b61de9eca4bce12c4afd8e97" kindref="member">Evaluate</ref>(x)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>define<sp/>a<sp/>double<sp/>object<sp/>with<sp/>O<sp/>and<sp/>d<sp/>and<sp/>print<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapfel_1_1DoubleObject" kindref="compound">apfel::DoubleObject&lt;apfel::Operator, apfel::Distribution&gt;</ref><sp/>DObj{{{1,<sp/>O,<sp/>d}}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>DObj<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
