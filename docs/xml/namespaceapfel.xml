<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="namespaceapfel" kind="namespace" language="C++">
    <compoundname>apfel</compoundname>
    <innerclass refid="classapfel_1_1AlphaQCD" prot="public">apfel::AlphaQCD</innerclass>
    <innerclass refid="classapfel_1_1AlphaQED" prot="public">apfel::AlphaQED</innerclass>
    <innerclass refid="classapfel_1_1ANS2qqH__0" prot="public">apfel::ANS2qqH_0</innerclass>
    <innerclass refid="classapfel_1_1ANS2qqH__L" prot="public">apfel::ANS2qqH_L</innerclass>
    <innerclass refid="classapfel_1_1ANS2qqH__L2" prot="public">apfel::ANS2qqH_L2</innerclass>
    <innerclass refid="classapfel_1_1APS2Hq__0" prot="public">apfel::APS2Hq_0</innerclass>
    <innerclass refid="classapfel_1_1APS2Hq__L" prot="public">apfel::APS2Hq_L</innerclass>
    <innerclass refid="classapfel_1_1APS2Hq__L2" prot="public">apfel::APS2Hq_L2</innerclass>
    <innerclass refid="classapfel_1_1AS1ggH__L" prot="public">apfel::AS1ggH_L</innerclass>
    <innerclass refid="classapfel_1_1AS1gH__0" prot="public">apfel::AS1gH_0</innerclass>
    <innerclass refid="classapfel_1_1AS1gH__L" prot="public">apfel::AS1gH_L</innerclass>
    <innerclass refid="classapfel_1_1AS1Hg__L" prot="public">apfel::AS1Hg_L</innerclass>
    <innerclass refid="classapfel_1_1AS1HH__0" prot="public">apfel::AS1HH_0</innerclass>
    <innerclass refid="classapfel_1_1AS1HH__L" prot="public">apfel::AS1HH_L</innerclass>
    <innerclass refid="classapfel_1_1AS2ggH__0" prot="public">apfel::AS2ggH_0</innerclass>
    <innerclass refid="classapfel_1_1AS2ggH__L" prot="public">apfel::AS2ggH_L</innerclass>
    <innerclass refid="classapfel_1_1AS2ggH__L2" prot="public">apfel::AS2ggH_L2</innerclass>
    <innerclass refid="classapfel_1_1AS2gqH__0" prot="public">apfel::AS2gqH_0</innerclass>
    <innerclass refid="classapfel_1_1AS2gqH__L" prot="public">apfel::AS2gqH_L</innerclass>
    <innerclass refid="classapfel_1_1AS2gqH__L2" prot="public">apfel::AS2gqH_L2</innerclass>
    <innerclass refid="classapfel_1_1AS2Hg__0" prot="public">apfel::AS2Hg_0</innerclass>
    <innerclass refid="classapfel_1_1AS2Hg__L" prot="public">apfel::AS2Hg_L</innerclass>
    <innerclass refid="classapfel_1_1AS2Hg__L2" prot="public">apfel::AS2Hg_L2</innerclass>
    <innerclass refid="classapfel_1_1ATS1ggH__L" prot="public">apfel::ATS1ggH_L</innerclass>
    <innerclass refid="classapfel_1_1ATS1gH__L" prot="public">apfel::ATS1gH_L</innerclass>
    <innerclass refid="classapfel_1_1ATS1Hg__0" prot="public">apfel::ATS1Hg_0</innerclass>
    <innerclass refid="classapfel_1_1ATS1Hg__L" prot="public">apfel::ATS1Hg_L</innerclass>
    <innerclass refid="classapfel_1_1ATS1HH__0" prot="public">apfel::ATS1HH_0</innerclass>
    <innerclass refid="classapfel_1_1ATS1HH__L" prot="public">apfel::ATS1HH_L</innerclass>
    <innerclass refid="classapfel_1_1C1ggff" prot="public">apfel::C1ggff</innerclass>
    <innerclass refid="classapfel_1_1C1ggpdf" prot="public">apfel::C1ggpdf</innerclass>
    <innerclass refid="classapfel_1_1C1ggpdfBM" prot="public">apfel::C1ggpdfBM</innerclass>
    <innerclass refid="classapfel_1_1C1gqff" prot="public">apfel::C1gqff</innerclass>
    <innerclass refid="classapfel_1_1C1gqpdf" prot="public">apfel::C1gqpdf</innerclass>
    <innerclass refid="classapfel_1_1C1gqpdfBM" prot="public">apfel::C1gqpdfBM</innerclass>
    <innerclass refid="classapfel_1_1C1nsff" prot="public">apfel::C1nsff</innerclass>
    <innerclass refid="classapfel_1_1C1nspdf" prot="public">apfel::C1nspdf</innerclass>
    <innerclass refid="classapfel_1_1C1qgff" prot="public">apfel::C1qgff</innerclass>
    <innerclass refid="classapfel_1_1C1qgpdf" prot="public">apfel::C1qgpdf</innerclass>
    <innerclass refid="classapfel_1_1C21g" prot="public">apfel::C21g</innerclass>
    <innerclass refid="classapfel_1_1C21ns" prot="public">apfel::C21ns</innerclass>
    <innerclass refid="classapfel_1_1C21Tg" prot="public">apfel::C21Tg</innerclass>
    <innerclass refid="classapfel_1_1C21Tns" prot="public">apfel::C21Tns</innerclass>
    <innerclass refid="classapfel_1_1C22g" prot="public">apfel::C22g</innerclass>
    <innerclass refid="classapfel_1_1C22nsm" prot="public">apfel::C22nsm</innerclass>
    <innerclass refid="classapfel_1_1C22nsp" prot="public">apfel::C22nsp</innerclass>
    <innerclass refid="classapfel_1_1C22ps" prot="public">apfel::C22ps</innerclass>
    <innerclass refid="classapfel_1_1C22Tg" prot="public">apfel::C22Tg</innerclass>
    <innerclass refid="classapfel_1_1C22Tnsp" prot="public">apfel::C22Tnsp</innerclass>
    <innerclass refid="classapfel_1_1C22Tps" prot="public">apfel::C22Tps</innerclass>
    <innerclass refid="classapfel_1_1C2ggff" prot="public">apfel::C2ggff</innerclass>
    <innerclass refid="classapfel_1_1C2ggpdf" prot="public">apfel::C2ggpdf</innerclass>
    <innerclass refid="classapfel_1_1C2gqff" prot="public">apfel::C2gqff</innerclass>
    <innerclass refid="classapfel_1_1C2gqpdf" prot="public">apfel::C2gqpdf</innerclass>
    <innerclass refid="classapfel_1_1C2psff" prot="public">apfel::C2psff</innerclass>
    <innerclass refid="classapfel_1_1C2pspdf" prot="public">apfel::C2pspdf</innerclass>
    <innerclass refid="classapfel_1_1C2qgff" prot="public">apfel::C2qgff</innerclass>
    <innerclass refid="classapfel_1_1C2qgpdf" prot="public">apfel::C2qgpdf</innerclass>
    <innerclass refid="classapfel_1_1C2Vqqbff" prot="public">apfel::C2Vqqbff</innerclass>
    <innerclass refid="classapfel_1_1C2Vqqbpdf" prot="public">apfel::C2Vqqbpdf</innerclass>
    <innerclass refid="classapfel_1_1C2Vqqff" prot="public">apfel::C2Vqqff</innerclass>
    <innerclass refid="classapfel_1_1C2Vqqpdf" prot="public">apfel::C2Vqqpdf</innerclass>
    <innerclass refid="classapfel_1_1C31ns" prot="public">apfel::C31ns</innerclass>
    <innerclass refid="classapfel_1_1C31Tns" prot="public">apfel::C31Tns</innerclass>
    <innerclass refid="classapfel_1_1C32nsm" prot="public">apfel::C32nsm</innerclass>
    <innerclass refid="classapfel_1_1C32nsp" prot="public">apfel::C32nsp</innerclass>
    <innerclass refid="classapfel_1_1C32Tnsp" prot="public">apfel::C32Tnsp</innerclass>
    <innerclass refid="classapfel_1_1C3ggpdf" prot="public">apfel::C3ggpdf</innerclass>
    <innerclass refid="classapfel_1_1C3gqpdf" prot="public">apfel::C3gqpdf</innerclass>
    <innerclass refid="classapfel_1_1C3pspdf" prot="public">apfel::C3pspdf</innerclass>
    <innerclass refid="classapfel_1_1C3pvpdf" prot="public">apfel::C3pvpdf</innerclass>
    <innerclass refid="classapfel_1_1C3qgpdf" prot="public">apfel::C3qgpdf</innerclass>
    <innerclass refid="classapfel_1_1C3Vqqbpdf" prot="public">apfel::C3Vqqbpdf</innerclass>
    <innerclass refid="classapfel_1_1C3Vqqpdf" prot="public">apfel::C3Vqqpdf</innerclass>
    <innerclass refid="classapfel_1_1CL1g" prot="public">apfel::CL1g</innerclass>
    <innerclass refid="classapfel_1_1CL1ns" prot="public">apfel::CL1ns</innerclass>
    <innerclass refid="classapfel_1_1CL1Tg" prot="public">apfel::CL1Tg</innerclass>
    <innerclass refid="classapfel_1_1CL1Tns" prot="public">apfel::CL1Tns</innerclass>
    <innerclass refid="classapfel_1_1CL2g" prot="public">apfel::CL2g</innerclass>
    <innerclass refid="classapfel_1_1CL2nsm" prot="public">apfel::CL2nsm</innerclass>
    <innerclass refid="classapfel_1_1CL2nsp" prot="public">apfel::CL2nsp</innerclass>
    <innerclass refid="classapfel_1_1CL2ps" prot="public">apfel::CL2ps</innerclass>
    <innerclass refid="classapfel_1_1CL2Tg" prot="public">apfel::CL2Tg</innerclass>
    <innerclass refid="classapfel_1_1CL2Tnsp" prot="public">apfel::CL2Tnsp</innerclass>
    <innerclass refid="classapfel_1_1CL2Tps" prot="public">apfel::CL2Tps</innerclass>
    <innerclass refid="classapfel_1_1Cm021gNC__c" prot="public">apfel::Cm021gNC_c</innerclass>
    <innerclass refid="classapfel_1_1Cm021gNC__l" prot="public">apfel::Cm021gNC_l</innerclass>
    <innerclass refid="classapfel_1_1Cm022gNC__c" prot="public">apfel::Cm022gNC_c</innerclass>
    <innerclass refid="classapfel_1_1Cm022gNC__f" prot="public">apfel::Cm022gNC_f</innerclass>
    <innerclass refid="classapfel_1_1Cm022gNC__l" prot="public">apfel::Cm022gNC_l</innerclass>
    <innerclass refid="classapfel_1_1Cm022gNC__l2" prot="public">apfel::Cm022gNC_l2</innerclass>
    <innerclass refid="classapfel_1_1Cm022gNC__lf" prot="public">apfel::Cm022gNC_lf</innerclass>
    <innerclass refid="classapfel_1_1Cm022nsNC__c" prot="public">apfel::Cm022nsNC_c</innerclass>
    <innerclass refid="classapfel_1_1Cm022nsNC__l" prot="public">apfel::Cm022nsNC_l</innerclass>
    <innerclass refid="classapfel_1_1Cm022nsNC__l2" prot="public">apfel::Cm022nsNC_l2</innerclass>
    <innerclass refid="classapfel_1_1Cm022psNC__c" prot="public">apfel::Cm022psNC_c</innerclass>
    <innerclass refid="classapfel_1_1Cm022psNC__f" prot="public">apfel::Cm022psNC_f</innerclass>
    <innerclass refid="classapfel_1_1Cm022psNC__l" prot="public">apfel::Cm022psNC_l</innerclass>
    <innerclass refid="classapfel_1_1Cm022psNC__l2" prot="public">apfel::Cm022psNC_l2</innerclass>
    <innerclass refid="classapfel_1_1Cm022psNC__lf" prot="public">apfel::Cm022psNC_lf</innerclass>
    <innerclass refid="classapfel_1_1Cm0L1gNC__c" prot="public">apfel::Cm0L1gNC_c</innerclass>
    <innerclass refid="classapfel_1_1Cm0L2gNC__c" prot="public">apfel::Cm0L2gNC_c</innerclass>
    <innerclass refid="classapfel_1_1Cm0L2gNC__f" prot="public">apfel::Cm0L2gNC_f</innerclass>
    <innerclass refid="classapfel_1_1Cm0L2gNC__l" prot="public">apfel::Cm0L2gNC_l</innerclass>
    <innerclass refid="classapfel_1_1Cm0L2nsNC__c" prot="public">apfel::Cm0L2nsNC_c</innerclass>
    <innerclass refid="classapfel_1_1Cm0L2nsNC__l" prot="public">apfel::Cm0L2nsNC_l</innerclass>
    <innerclass refid="classapfel_1_1Cm0L2psNC__c" prot="public">apfel::Cm0L2psNC_c</innerclass>
    <innerclass refid="classapfel_1_1Cm0L2psNC__f" prot="public">apfel::Cm0L2psNC_f</innerclass>
    <innerclass refid="classapfel_1_1Cm0L2psNC__l" prot="public">apfel::Cm0L2psNC_l</innerclass>
    <innerclass refid="classapfel_1_1Cm21gNC" prot="public">apfel::Cm21gNC</innerclass>
    <innerclass refid="classapfel_1_1Cm22bargNC" prot="public">apfel::Cm22bargNC</innerclass>
    <innerclass refid="classapfel_1_1Cm22barpsNC" prot="public">apfel::Cm22barpsNC</innerclass>
    <innerclass refid="classapfel_1_1Cm22gNC" prot="public">apfel::Cm22gNC</innerclass>
    <innerclass refid="classapfel_1_1Cm22nsNC" prot="public">apfel::Cm22nsNC</innerclass>
    <innerclass refid="classapfel_1_1Cm22psNC" prot="public">apfel::Cm22psNC</innerclass>
    <innerclass refid="classapfel_1_1CmL1gNC" prot="public">apfel::CmL1gNC</innerclass>
    <innerclass refid="classapfel_1_1CmL2bargNC" prot="public">apfel::CmL2bargNC</innerclass>
    <innerclass refid="classapfel_1_1CmL2barpsNC" prot="public">apfel::CmL2barpsNC</innerclass>
    <innerclass refid="classapfel_1_1CmL2gNC" prot="public">apfel::CmL2gNC</innerclass>
    <innerclass refid="classapfel_1_1CmL2nsNC" prot="public">apfel::CmL2nsNC</innerclass>
    <innerclass refid="classapfel_1_1CmL2psNC" prot="public">apfel::CmL2psNC</innerclass>
    <innerclass refid="classapfel_1_1ConvolutionMap" prot="public">apfel::ConvolutionMap</innerclass>
    <innerclass refid="classapfel_1_1Dglap" prot="public">apfel::Dglap</innerclass>
    <innerclass refid="structapfel_1_1DglapObjects" prot="public">apfel::DglapObjects</innerclass>
    <innerclass refid="classapfel_1_1DiagonalBasis" prot="public">apfel::DiagonalBasis</innerclass>
    <innerclass refid="classapfel_1_1DISCCBasis" prot="public">apfel::DISCCBasis</innerclass>
    <innerclass refid="classapfel_1_1DISNCBasis" prot="public">apfel::DISNCBasis</innerclass>
    <innerclass refid="classapfel_1_1Distribution" prot="public">apfel::Distribution</innerclass>
    <innerclass refid="classapfel_1_1DoubleExponentialQuadrature" prot="public">apfel::DoubleExponentialQuadrature</innerclass>
    <innerclass refid="classapfel_1_1DoubleObject" prot="public">apfel::DoubleObject</innerclass>
    <innerclass refid="classapfel_1_1EvolutionBasisQCD" prot="public">apfel::EvolutionBasisQCD</innerclass>
    <innerclass refid="classapfel_1_1EvolutionOperatorBasisQCD" prot="public">apfel::EvolutionOperatorBasisQCD</innerclass>
    <innerclass refid="structapfel_1_1EvolutionSetup" prot="public">apfel::EvolutionSetup</innerclass>
    <innerclass refid="classapfel_1_1EvolveDistributionsBasisQCD" prot="public">apfel::EvolveDistributionsBasisQCD</innerclass>
    <innerclass refid="classapfel_1_1Expression" prot="public">apfel::Expression</innerclass>
    <innerclass refid="classapfel_1_1ExtendedVector" prot="public">apfel::ExtendedVector</innerclass>
    <innerclass refid="classapfel_1_1Grid" prot="public">apfel::Grid</innerclass>
    <innerclass refid="classapfel_1_1Identity" prot="public">apfel::Identity</innerclass>
    <innerclass refid="classapfel_1_1InitialiseEvolution" prot="public">apfel::InitialiseEvolution</innerclass>
    <innerclass refid="classapfel_1_1Integrator" prot="public">apfel::Integrator</innerclass>
    <innerclass refid="classapfel_1_1Interpolator" prot="public">apfel::Interpolator</innerclass>
    <innerclass refid="classapfel_1_1LagrangeInterpolator" prot="public">apfel::LagrangeInterpolator</innerclass>
    <innerclass refid="structapfel_1_1LHKnotArray" prot="public">apfel::LHKnotArray</innerclass>
    <innerclass refid="classapfel_1_1MatchedEvolution" prot="public">apfel::MatchedEvolution</innerclass>
    <innerclass refid="classapfel_1_1MatchingBasisQCD" prot="public">apfel::MatchingBasisQCD</innerclass>
    <innerclass refid="classapfel_1_1MatchingOperatorBasisQCD" prot="public">apfel::MatchingOperatorBasisQCD</innerclass>
    <innerclass refid="classapfel_1_1matrix" prot="public">apfel::matrix</innerclass>
    <innerclass refid="classapfel_1_1Null" prot="public">apfel::Null</innerclass>
    <innerclass refid="classapfel_1_1Observable" prot="public">apfel::Observable</innerclass>
    <innerclass refid="classapfel_1_1OgataQuadrature" prot="public">apfel::OgataQuadrature</innerclass>
    <innerclass refid="classapfel_1_1Operator" prot="public">apfel::Operator</innerclass>
    <innerclass refid="classapfel_1_1P0gg" prot="public">apfel::P0gg</innerclass>
    <innerclass refid="classapfel_1_1P0gq" prot="public">apfel::P0gq</innerclass>
    <innerclass refid="classapfel_1_1P0ns" prot="public">apfel::P0ns</innerclass>
    <innerclass refid="classapfel_1_1P0polgg" prot="public">apfel::P0polgg</innerclass>
    <innerclass refid="classapfel_1_1P0polgq" prot="public">apfel::P0polgq</innerclass>
    <innerclass refid="classapfel_1_1P0polns" prot="public">apfel::P0polns</innerclass>
    <innerclass refid="classapfel_1_1P0polqg" prot="public">apfel::P0polqg</innerclass>
    <innerclass refid="classapfel_1_1P0qg" prot="public">apfel::P0qg</innerclass>
    <innerclass refid="classapfel_1_1P0Tgg" prot="public">apfel::P0Tgg</innerclass>
    <innerclass refid="classapfel_1_1P0Tgq" prot="public">apfel::P0Tgq</innerclass>
    <innerclass refid="classapfel_1_1P0Tns" prot="public">apfel::P0Tns</innerclass>
    <innerclass refid="classapfel_1_1P0Tqg" prot="public">apfel::P0Tqg</innerclass>
    <innerclass refid="classapfel_1_1P0transns" prot="public">apfel::P0transns</innerclass>
    <innerclass refid="classapfel_1_1P0Ttransns" prot="public">apfel::P0Ttransns</innerclass>
    <innerclass refid="classapfel_1_1P1gg" prot="public">apfel::P1gg</innerclass>
    <innerclass refid="classapfel_1_1P1gq" prot="public">apfel::P1gq</innerclass>
    <innerclass refid="classapfel_1_1P1nsm" prot="public">apfel::P1nsm</innerclass>
    <innerclass refid="classapfel_1_1P1nsp" prot="public">apfel::P1nsp</innerclass>
    <innerclass refid="classapfel_1_1P1polgg" prot="public">apfel::P1polgg</innerclass>
    <innerclass refid="classapfel_1_1P1polgq" prot="public">apfel::P1polgq</innerclass>
    <innerclass refid="classapfel_1_1P1polnsm" prot="public">apfel::P1polnsm</innerclass>
    <innerclass refid="classapfel_1_1P1polnsp" prot="public">apfel::P1polnsp</innerclass>
    <innerclass refid="classapfel_1_1P1polps" prot="public">apfel::P1polps</innerclass>
    <innerclass refid="classapfel_1_1P1polqg" prot="public">apfel::P1polqg</innerclass>
    <innerclass refid="classapfel_1_1P1ps" prot="public">apfel::P1ps</innerclass>
    <innerclass refid="classapfel_1_1P1qg" prot="public">apfel::P1qg</innerclass>
    <innerclass refid="classapfel_1_1P1Tgg" prot="public">apfel::P1Tgg</innerclass>
    <innerclass refid="classapfel_1_1P1Tgq" prot="public">apfel::P1Tgq</innerclass>
    <innerclass refid="classapfel_1_1P1Tnsm" prot="public">apfel::P1Tnsm</innerclass>
    <innerclass refid="classapfel_1_1P1Tnsp" prot="public">apfel::P1Tnsp</innerclass>
    <innerclass refid="classapfel_1_1P1Tps" prot="public">apfel::P1Tps</innerclass>
    <innerclass refid="classapfel_1_1P1Tqg" prot="public">apfel::P1Tqg</innerclass>
    <innerclass refid="classapfel_1_1P1transnsm" prot="public">apfel::P1transnsm</innerclass>
    <innerclass refid="classapfel_1_1P1transnsp" prot="public">apfel::P1transnsp</innerclass>
    <innerclass refid="classapfel_1_1P1Ttransnsm" prot="public">apfel::P1Ttransnsm</innerclass>
    <innerclass refid="classapfel_1_1P1Ttransnsp" prot="public">apfel::P1Ttransnsp</innerclass>
    <innerclass refid="classapfel_1_1P2gg" prot="public">apfel::P2gg</innerclass>
    <innerclass refid="classapfel_1_1P2gq" prot="public">apfel::P2gq</innerclass>
    <innerclass refid="classapfel_1_1P2nsm" prot="public">apfel::P2nsm</innerclass>
    <innerclass refid="classapfel_1_1P2nsp" prot="public">apfel::P2nsp</innerclass>
    <innerclass refid="classapfel_1_1P2nss" prot="public">apfel::P2nss</innerclass>
    <innerclass refid="classapfel_1_1P2polgg" prot="public">apfel::P2polgg</innerclass>
    <innerclass refid="classapfel_1_1P2polgq" prot="public">apfel::P2polgq</innerclass>
    <innerclass refid="classapfel_1_1P2polnsm" prot="public">apfel::P2polnsm</innerclass>
    <innerclass refid="classapfel_1_1P2polnsp" prot="public">apfel::P2polnsp</innerclass>
    <innerclass refid="classapfel_1_1P2polnss" prot="public">apfel::P2polnss</innerclass>
    <innerclass refid="classapfel_1_1P2polps" prot="public">apfel::P2polps</innerclass>
    <innerclass refid="classapfel_1_1P2polqg" prot="public">apfel::P2polqg</innerclass>
    <innerclass refid="classapfel_1_1P2ps" prot="public">apfel::P2ps</innerclass>
    <innerclass refid="classapfel_1_1P2qg" prot="public">apfel::P2qg</innerclass>
    <innerclass refid="classapfel_1_1P2Tgg" prot="public">apfel::P2Tgg</innerclass>
    <innerclass refid="classapfel_1_1P2Tgq" prot="public">apfel::P2Tgq</innerclass>
    <innerclass refid="classapfel_1_1P2Tnsm" prot="public">apfel::P2Tnsm</innerclass>
    <innerclass refid="classapfel_1_1P2Tnsp" prot="public">apfel::P2Tnsp</innerclass>
    <innerclass refid="classapfel_1_1P2Tnss" prot="public">apfel::P2Tnss</innerclass>
    <innerclass refid="classapfel_1_1P2Tps" prot="public">apfel::P2Tps</innerclass>
    <innerclass refid="classapfel_1_1P2Tqg" prot="public">apfel::P2Tqg</innerclass>
    <innerclass refid="classapfel_1_1P3nsm" prot="public">apfel::P3nsm</innerclass>
    <innerclass refid="classapfel_1_1P3nsp" prot="public">apfel::P3nsp</innerclass>
    <innerclass refid="classapfel_1_1P3nss" prot="public">apfel::P3nss</innerclass>
    <innerclass refid="classapfel_1_1Pgpd0ggDGLAP" prot="public">apfel::Pgpd0ggDGLAP</innerclass>
    <innerclass refid="classapfel_1_1Pgpd0ggERBL" prot="public">apfel::Pgpd0ggERBL</innerclass>
    <innerclass refid="classapfel_1_1Pgpd0gqDGLAP" prot="public">apfel::Pgpd0gqDGLAP</innerclass>
    <innerclass refid="classapfel_1_1Pgpd0gqERBL" prot="public">apfel::Pgpd0gqERBL</innerclass>
    <innerclass refid="classapfel_1_1Pgpd0nsDGLAP" prot="public">apfel::Pgpd0nsDGLAP</innerclass>
    <innerclass refid="classapfel_1_1Pgpd0nsERBL" prot="public">apfel::Pgpd0nsERBL</innerclass>
    <innerclass refid="classapfel_1_1Pgpd0qgDGLAP" prot="public">apfel::Pgpd0qgDGLAP</innerclass>
    <innerclass refid="classapfel_1_1Pgpd0qgERBL" prot="public">apfel::Pgpd0qgERBL</innerclass>
    <innerclass refid="classapfel_1_1QGrid" prot="public">apfel::QGrid</innerclass>
    <innerclass refid="classapfel_1_1Set" prot="public">apfel::Set</innerclass>
    <innerclass refid="structapfel_1_1StructureFunctionObjects" prot="public">apfel::StructureFunctionObjects</innerclass>
    <innerclass refid="classapfel_1_1SubGrid" prot="public">apfel::SubGrid</innerclass>
    <innerclass refid="classapfel_1_1TabulateObject" prot="public">apfel::TabulateObject</innerclass>
    <innerclass refid="structapfel_1_1term" prot="public">apfel::term</innerclass>
    <innerclass refid="classapfel_1_1Timer" prot="public">apfel::Timer</innerclass>
    <innerclass refid="structapfel_1_1TmdObjects" prot="public">apfel::TmdObjects</innerclass>
    <innerclass refid="classapfel_1_1TwoBodyPhaseSpace" prot="public">apfel::TwoBodyPhaseSpace</innerclass>
      <sectiondef kind="user-defined">
      <header>QCD beta function</header>
      <description><para>Coefficients of the QCD <formula id="1">$\beta$</formula> function. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1aec59defd4efa5b0cab6b297994a81d13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::beta0qcd</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>beta0qcd</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para>LO coefficient of the QCD <formula id="1">$\beta$</formula> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nf</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of active flavours </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><formula id="2">$\beta_0(n_f)$</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/betaqcd.h" line="21" column="10" declfile="inc/apfel/betaqcd.h" declline="21" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a4a86e6e6ee467f4315ec98163bf1c483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::beta1qcd</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>beta1qcd</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para>NLO coefficient of the QCD <formula id="1">$\beta$</formula> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nf</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of active flavours </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><formula id="3">$\beta_1(n_f)$</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/betaqcd.h" line="28" column="10" declfile="inc/apfel/betaqcd.h" declline="28" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a246c7375cddb32ed53ee4f1a79836569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::beta2qcd</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>beta2qcd</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para>NNLO coefficient of the QCD <formula id="1">$\beta$</formula> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nf</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of active flavours </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><formula id="4">$\beta_2(n_f)$</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/betaqcd.h" line="35" column="10" declfile="inc/apfel/betaqcd.h" declline="35" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a780121c6acabc585bf2f16d992ec6dab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::beta3qcd</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>beta3qcd</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para>NNNLO coefficient of the QCD <formula id="1">$\beta$</formula> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nf</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of active flavours </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><formula id="5">$\beta_3(n_f)$</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/betaqcd.h" line="42" column="10" declfile="inc/apfel/betaqcd.h" declline="42" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>QED beta function</header>
      <description><para>Coefficients of the QED <formula id="6">$\beta_{QED}$</formula> function. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1ae95ebb55b1718733aa14d879062e362f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::beta0qed</definition>
        <argsstring>(int const &amp;nf, int const &amp;nl)</argsstring>
        <name>beta0qed</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nl</declname>
        </param>
        <briefdescription>
<para>LO coefficient of the QED <formula id="1">$\beta$</formula> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nf</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of active quark flavours </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nl</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of active charged leptons </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><formula id="7">$\beta_0(n_f, n_l)$</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/betaqed.h" line="22" column="10" declfile="inc/apfel/betaqed.h" declline="22" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aed080a12594e6a5af37ae5a07912df5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::beta1qed</definition>
        <argsstring>(int const &amp;nf, int const &amp;nl)</argsstring>
        <name>beta1qed</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nl</declname>
        </param>
        <briefdescription>
<para>NLO coefficient of the QED <formula id="1">$\beta$</formula> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nf</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of active flavours </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nl</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of active charged leptons </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><formula id="8">$\beta_1(n_f, n_l)$</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/betaqed.h" line="30" column="10" declfile="inc/apfel/betaqed.h" declline="30" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Small numbers</header>
      <description><para>Small numbers used for cutoffs, integration accuracies, etc. </para>
</description>
      <memberdef kind="variable" id="group__MathConstants_1gaba9b9e4a5f5f7355356dc1b1aec7eeb6" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps2</definition>
        <argsstring></argsstring>
        <name>eps2</name>
        <initializer>= 1e-2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="32" column="16" bodyfile="inc/apfel/constants.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1gaadf0a98a20c9279e274beb47f3bb7a67" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps3</definition>
        <argsstring></argsstring>
        <name>eps3</name>
        <initializer>= 1e-3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="33" column="16" bodyfile="inc/apfel/constants.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga49c469ab593c5b1f8bdaae4e7908e3af" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps4</definition>
        <argsstring></argsstring>
        <name>eps4</name>
        <initializer>= 1e-4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="34" column="16" bodyfile="inc/apfel/constants.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga02c6f845f0a0d9edd09b909463149a66" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps5</definition>
        <argsstring></argsstring>
        <name>eps5</name>
        <initializer>= 1e-5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="35" column="16" bodyfile="inc/apfel/constants.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga758b0c74178be7646453169d0d137f8f" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps6</definition>
        <argsstring></argsstring>
        <name>eps6</name>
        <initializer>= 1e-6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="36" column="16" bodyfile="inc/apfel/constants.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga2285885e136192d90a76bad54aa40d5c" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps7</definition>
        <argsstring></argsstring>
        <name>eps7</name>
        <initializer>= 1e-7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="37" column="16" bodyfile="inc/apfel/constants.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga7ffa9143b8e4ad189f9ca4dc75379a45" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps8</definition>
        <argsstring></argsstring>
        <name>eps8</name>
        <initializer>= 1e-8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="38" column="16" bodyfile="inc/apfel/constants.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga8fab04c175bb261c96c6b89d2584b243" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps9</definition>
        <argsstring></argsstring>
        <name>eps9</name>
        <initializer>= 1e-9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="39" column="16" bodyfile="inc/apfel/constants.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga6047a08b2ca07a0903c7909c13e41d88" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps10</definition>
        <argsstring></argsstring>
        <name>eps10</name>
        <initializer>= 1e-10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="40" column="16" bodyfile="inc/apfel/constants.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga627096cc5542441d120e9212c87126d2" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps11</definition>
        <argsstring></argsstring>
        <name>eps11</name>
        <initializer>= 1e-11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="41" column="16" bodyfile="inc/apfel/constants.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga7502bbe9bf26ff3095bf7153457135f3" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps12</definition>
        <argsstring></argsstring>
        <name>eps12</name>
        <initializer>= 1e-12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="42" column="16" bodyfile="inc/apfel/constants.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga0175cbb7a6b342b42d575467bf9ee8cd" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps13</definition>
        <argsstring></argsstring>
        <name>eps13</name>
        <initializer>= 1e-13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="43" column="16" bodyfile="inc/apfel/constants.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga4ea055c0c71c1f5e598c249de2866912" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps14</definition>
        <argsstring></argsstring>
        <name>eps14</name>
        <initializer>= 1e-14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="44" column="16" bodyfile="inc/apfel/constants.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga50d276481b75ec2db2282ea9446c937a" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps15</definition>
        <argsstring></argsstring>
        <name>eps15</name>
        <initializer>= 1e-15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="45" column="16" bodyfile="inc/apfel/constants.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga04d2d963961509840b50a2d8f6f145a8" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eps25</definition>
        <argsstring></argsstring>
        <name>eps25</name>
        <initializer>= 1e-25</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="46" column="16" bodyfile="inc/apfel/constants.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Numerical constants</header>
      <description><para>Definitions for recurrent constants. </para>
</description>
      <memberdef kind="variable" id="group__MathConstants_1ga9c7ef97459ddf2159d123ca9ceffe09b" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Pi2</definition>
        <argsstring></argsstring>
        <name>Pi2</name>
        <initializer>= M_PI * M_PI</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="54" column="16" bodyfile="inc/apfel/constants.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga85b8b6031f7dc4332676cf62fd78f18a" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::FourPi</definition>
        <argsstring></argsstring>
        <name>FourPi</name>
        <initializer>= 4 * M_PI</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="55" column="16" bodyfile="inc/apfel/constants.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga240795bbdee297aae748a1683bce99b6" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::emc</definition>
        <argsstring></argsstring>
        <name>emc</name>
        <initializer>= 0.5772156649015329</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="56" column="16" bodyfile="inc/apfel/constants.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga35fb1a2f328a8628032d37315c2e6366" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::zeta2</definition>
        <argsstring></argsstring>
        <name>zeta2</name>
        <initializer>= 1.6449340668482264</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="57" column="16" bodyfile="inc/apfel/constants.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga8c61738249340194dc5348b0f308cc31" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::zeta3</definition>
        <argsstring></argsstring>
        <name>zeta3</name>
        <initializer>= 1.2020569031595943</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="58" column="16" bodyfile="inc/apfel/constants.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1gada81e2768570ad4b52fb29b6c5f0cfc7" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::zeta4</definition>
        <argsstring></argsstring>
        <name>zeta4</name>
        <initializer>= 1.0823232337111382</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="59" column="16" bodyfile="inc/apfel/constants.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga6ec5e74a577acfed19a3ba3b05006da8" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::zeta5</definition>
        <argsstring></argsstring>
        <name>zeta5</name>
        <initializer>= 1.0369277551433699</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="60" column="16" bodyfile="inc/apfel/constants.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga34c092dc0a3f96e1dfba146df5770af4" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::zeta6</definition>
        <argsstring></argsstring>
        <name>zeta6</name>
        <initializer>= 1.0173430619844491</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="61" column="16" bodyfile="inc/apfel/constants.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>QCD colour factors</header>
      <description><para>The SU(3) Casimir&apos;s. </para>
</description>
      <memberdef kind="variable" id="group__MathConstants_1gaa5cdb3b0774934c96e344d691863282a" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::TR</definition>
        <argsstring></argsstring>
        <name>TR</name>
        <initializer>= 0.5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="69" column="16" bodyfile="inc/apfel/constants.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga687ec16c12edc12df465398573b42d47" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::CF</definition>
        <argsstring></argsstring>
        <name>CF</name>
        <initializer>= 4. / 3.</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="70" column="16" bodyfile="inc/apfel/constants.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1ga8eecdadecd5396bb2e5eaa7a99267895" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::CA</definition>
        <argsstring></argsstring>
        <name>CA</name>
        <initializer>= 3.</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="71" column="16" bodyfile="inc/apfel/constants.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__MathConstants_1gadff9aadfe2fba84ec0abee6cd9b1f880" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::NC</definition>
        <argsstring></argsstring>
        <name>NC</name>
        <initializer>= 3.</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="72" column="16" bodyfile="inc/apfel/constants.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Quark charges</header>
      <description><para>Quark electric charges and their square. </para>
</description>
      <memberdef kind="variable" id="group__PhysConstants_1ga27d95df89b3300852e09c217a893a878" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::ed</definition>
        <argsstring></argsstring>
        <name>ed</name>
        <initializer>= - 1. / 3.</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="87" column="16" bodyfile="inc/apfel/constants.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1gaf6ca2b5f4cf5db0e29748bb88f98e1b1" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eu</definition>
        <argsstring></argsstring>
        <name>eu</name>
        <initializer>=   2. / 3.</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="88" column="16" bodyfile="inc/apfel/constants.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga3cb793ece46ee52d8adcad5694e203b5" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::ed2</definition>
        <argsstring></argsstring>
        <name>ed2</name>
        <initializer>=   1. / 9.</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="89" column="16" bodyfile="inc/apfel/constants.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga62c16d3895fbe1c4f518f794968f7ade" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::eu2</definition>
        <argsstring></argsstring>
        <name>eu2</name>
        <initializer>=   4. / 9.</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="90" column="16" bodyfile="inc/apfel/constants.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga5eae545badb8945cd767271b573a8fc2" prot="public" static="no" mutable="no">
        <type>const std::vector&lt; double &gt;</type>
        <definition>const std::vector&lt;double&gt; apfel::QCh</definition>
        <argsstring></argsstring>
        <name>QCh</name>
        <initializer>= {<ref refid="group__PhysConstants_1ga27d95df89b3300852e09c217a893a878" kindref="member">ed</ref>,  <ref refid="group__PhysConstants_1gaf6ca2b5f4cf5db0e29748bb88f98e1b1" kindref="member">eu</ref>,  <ref refid="group__PhysConstants_1ga27d95df89b3300852e09c217a893a878" kindref="member">ed</ref>,  <ref refid="group__PhysConstants_1gaf6ca2b5f4cf5db0e29748bb88f98e1b1" kindref="member">eu</ref>,  <ref refid="group__PhysConstants_1ga27d95df89b3300852e09c217a893a878" kindref="member">ed</ref>,  <ref refid="group__PhysConstants_1gaf6ca2b5f4cf5db0e29748bb88f98e1b1" kindref="member">eu</ref>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="91" column="21" bodyfile="inc/apfel/constants.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga4e9304b2e9dfeb40a2ad1a3cfa6b2e6a" prot="public" static="no" mutable="no">
        <type>const std::vector&lt; double &gt;</type>
        <definition>const std::vector&lt;double&gt; apfel::QCh2</definition>
        <argsstring></argsstring>
        <name>QCh2</name>
        <initializer>= {<ref refid="group__PhysConstants_1ga3cb793ece46ee52d8adcad5694e203b5" kindref="member">ed2</ref>, <ref refid="group__PhysConstants_1ga62c16d3895fbe1c4f518f794968f7ade" kindref="member">eu2</ref>, <ref refid="group__PhysConstants_1ga3cb793ece46ee52d8adcad5694e203b5" kindref="member">ed2</ref>, <ref refid="group__PhysConstants_1ga62c16d3895fbe1c4f518f794968f7ade" kindref="member">eu2</ref>, <ref refid="group__PhysConstants_1ga3cb793ece46ee52d8adcad5694e203b5" kindref="member">ed2</ref>, <ref refid="group__PhysConstants_1ga62c16d3895fbe1c4f518f794968f7ade" kindref="member">eu2</ref>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="92" column="21" bodyfile="inc/apfel/constants.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Conversion factor</header>
      <description><para>Conversion factor from GeV<superscript>-2</superscript> to pb. </para>
</description>
      <memberdef kind="variable" id="group__PhysConstants_1gae98d82c9534cde7c04ae48896e66360e" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::ConvFact</definition>
        <argsstring></argsstring>
        <name>ConvFact</name>
        <initializer>= 0.3893793656e9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="100" column="16" bodyfile="inc/apfel/constants.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Z-boson mass and width</header>
      <description><para>Value of the mass of the Z boson and its width in GeV taken from: <ulink url="http://pdg.lbl.gov/2018/listings/rpp2018-list-z-boson.pdf">http://pdg.lbl.gov/2018/listings/rpp2018-list-z-boson.pdf</ulink>. </para>
</description>
      <memberdef kind="variable" id="group__PhysConstants_1ga82230f0bff74905ae3596d00a10ee956" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::ZMass</definition>
        <argsstring></argsstring>
        <name>ZMass</name>
        <initializer>= 91.1876</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="110" column="16" bodyfile="inc/apfel/constants.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1gabd11d74b7dcb591975dc2695b9f887ec" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::GammaZ</definition>
        <argsstring></argsstring>
        <name>GammaZ</name>
        <initializer>= 2.4952</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="111" column="16" bodyfile="inc/apfel/constants.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>W-boson mass and width</header>
      <description><para>Value of the mass of the W bosons and their width in GeV taken from: <ulink url="http://pdg.lbl.gov/2018/listings/rpp2018-list-w-boson.pdf">http://pdg.lbl.gov/2018/listings/rpp2018-list-w-boson.pdf</ulink>. </para>
</description>
      <memberdef kind="variable" id="group__PhysConstants_1gac15192f07834361156df76cd57ad7b20" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::WMass</definition>
        <argsstring></argsstring>
        <name>WMass</name>
        <initializer>= 80.379</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="121" column="16" bodyfile="inc/apfel/constants.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga88a6077298cefab58b2272f65c05c75b" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::GammaW</definition>
        <argsstring></argsstring>
        <name>GammaW</name>
        <initializer>= 2.085</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="122" column="16" bodyfile="inc/apfel/constants.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Proton mass</header>
      <description><para>Value of the mass of the proton in GeV taken from: <ulink url="http://pdg.lbl.gov/2018/reviews/rpp2018-rev-phys-constants.pdf">http://pdg.lbl.gov/2018/reviews/rpp2018-rev-phys-constants.pdf</ulink>. </para>
</description>
      <memberdef kind="variable" id="group__PhysConstants_1ga77dbc0a129205ed2d8bbd57d8b317e55" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::ProtonMass</definition>
        <argsstring></argsstring>
        <name>ProtonMass</name>
        <initializer>= 0.9382720813</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="131" column="16" bodyfile="inc/apfel/constants.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Weinberg angle</header>
      <description><para>Value of sin<superscript>2</superscript><theta/><subscript>W</subscript> in the MSbar scheme taken from: <ulink url="http://pdg.lbl.gov/2018/reviews/rpp2018-rev-phys-constants.pdf">http://pdg.lbl.gov/2018/reviews/rpp2018-rev-phys-constants.pdf</ulink>. </para>
</description>
      <memberdef kind="variable" id="group__PhysConstants_1ga9af859b43ff57c36612f5da5d4591bdc" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Sin2ThetaW</definition>
        <argsstring></argsstring>
        <name>Sin2ThetaW</name>
        <initializer>= 0.23122</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="141" column="16" bodyfile="inc/apfel/constants.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Fermi constant</header>
      <description><para>Value of G<subscript>F</subscript> in GeV<superscript>-2</superscript> taken from: <ulink url="http://pdg.lbl.gov/2018/reviews/rpp2018-rev-phys-constants.pdf">http://pdg.lbl.gov/2018/reviews/rpp2018-rev-phys-constants.pdf</ulink>. </para>
</description>
      <memberdef kind="variable" id="group__PhysConstants_1gaede2939625ff743f9dc736fe9eaf0779" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::GFermi</definition>
        <argsstring></argsstring>
        <name>GFermi</name>
        <initializer>= 1.1663787e-5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="150" column="16" bodyfile="inc/apfel/constants.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>CKM matrix elements</header>
      <description><para>Absolute value of the CMK matrix elements and their square taken from: <ulink url="http://pdg.lbl.gov/2018/reviews/rpp2018-rev-ckm-matrix.pdf">http://pdg.lbl.gov/2018/reviews/rpp2018-rev-ckm-matrix.pdf</ulink>. </para>
</description>
      <memberdef kind="variable" id="group__PhysConstants_1ga17cef36fa67d4d37a6f1d1ddef76f4c2" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vud</definition>
        <argsstring></argsstring>
        <name>Vud</name>
        <initializer>= 0.97446</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="160" column="16" bodyfile="inc/apfel/constants.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga48046453b45fa8d4d1394e3e486534ed" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vus</definition>
        <argsstring></argsstring>
        <name>Vus</name>
        <initializer>= 0.22452</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="161" column="16" bodyfile="inc/apfel/constants.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga17cb3cfbb88992ac625240ab5733ac1f" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vub</definition>
        <argsstring></argsstring>
        <name>Vub</name>
        <initializer>= 0.00365</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="162" column="16" bodyfile="inc/apfel/constants.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga93a9ede3a64ebd31415751d712de4398" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vcd</definition>
        <argsstring></argsstring>
        <name>Vcd</name>
        <initializer>= 0.22438</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="163" column="16" bodyfile="inc/apfel/constants.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1gafea926c054be18f99ad0e0d3541f4115" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vcs</definition>
        <argsstring></argsstring>
        <name>Vcs</name>
        <initializer>= 0.97359</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="164" column="16" bodyfile="inc/apfel/constants.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga506a53fe1623cf4f364c4a8ffdbcfc3e" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vcb</definition>
        <argsstring></argsstring>
        <name>Vcb</name>
        <initializer>= 0.04214</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="165" column="16" bodyfile="inc/apfel/constants.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1gac23b2e72756f04ebf35ad8f79406550c" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vtd</definition>
        <argsstring></argsstring>
        <name>Vtd</name>
        <initializer>= 0.00896</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="166" column="16" bodyfile="inc/apfel/constants.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1gabecc31f706440da341d21c8b9cc6ef06" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vts</definition>
        <argsstring></argsstring>
        <name>Vts</name>
        <initializer>= 0.04133</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="167" column="16" bodyfile="inc/apfel/constants.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1gac5c24ac570b81c678e62397059b76970" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vtb</definition>
        <argsstring></argsstring>
        <name>Vtb</name>
        <initializer>= 0.999105</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="168" column="16" bodyfile="inc/apfel/constants.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga5c8862e9d777c2c1c46ff10aa2524a6f" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vud2</definition>
        <argsstring></argsstring>
        <name>Vud2</name>
        <initializer>= <ref refid="group__PhysConstants_1ga17cef36fa67d4d37a6f1d1ddef76f4c2" kindref="member">Vud</ref> * <ref refid="group__PhysConstants_1ga17cef36fa67d4d37a6f1d1ddef76f4c2" kindref="member">Vud</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="169" column="16" bodyfile="inc/apfel/constants.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga21a05a52b2cb591650f2f32fa54e45cf" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vus2</definition>
        <argsstring></argsstring>
        <name>Vus2</name>
        <initializer>= <ref refid="group__PhysConstants_1ga48046453b45fa8d4d1394e3e486534ed" kindref="member">Vus</ref> * <ref refid="group__PhysConstants_1ga48046453b45fa8d4d1394e3e486534ed" kindref="member">Vus</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="170" column="16" bodyfile="inc/apfel/constants.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga6bd3a18d4f6fbcafc14aef9d39671e1a" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vub2</definition>
        <argsstring></argsstring>
        <name>Vub2</name>
        <initializer>= <ref refid="group__PhysConstants_1ga17cb3cfbb88992ac625240ab5733ac1f" kindref="member">Vub</ref> * <ref refid="group__PhysConstants_1ga17cb3cfbb88992ac625240ab5733ac1f" kindref="member">Vub</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="171" column="16" bodyfile="inc/apfel/constants.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga12d1c22c19e803e3eec405778128c2ee" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vcd2</definition>
        <argsstring></argsstring>
        <name>Vcd2</name>
        <initializer>= <ref refid="group__PhysConstants_1ga93a9ede3a64ebd31415751d712de4398" kindref="member">Vcd</ref> * <ref refid="group__PhysConstants_1ga93a9ede3a64ebd31415751d712de4398" kindref="member">Vcd</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="172" column="16" bodyfile="inc/apfel/constants.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga5af6909cb7b869d1d4aa340575cdc7ee" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vcs2</definition>
        <argsstring></argsstring>
        <name>Vcs2</name>
        <initializer>= <ref refid="group__PhysConstants_1gafea926c054be18f99ad0e0d3541f4115" kindref="member">Vcs</ref> * <ref refid="group__PhysConstants_1gafea926c054be18f99ad0e0d3541f4115" kindref="member">Vcs</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="173" column="16" bodyfile="inc/apfel/constants.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga837cff2f272cf9609bd6b488e06df60d" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vcb2</definition>
        <argsstring></argsstring>
        <name>Vcb2</name>
        <initializer>= <ref refid="group__PhysConstants_1ga506a53fe1623cf4f364c4a8ffdbcfc3e" kindref="member">Vcb</ref> * <ref refid="group__PhysConstants_1ga506a53fe1623cf4f364c4a8ffdbcfc3e" kindref="member">Vcb</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="174" column="16" bodyfile="inc/apfel/constants.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1gaf229efc39c729da895d58d6b35c59958" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vtd2</definition>
        <argsstring></argsstring>
        <name>Vtd2</name>
        <initializer>= <ref refid="group__PhysConstants_1gac23b2e72756f04ebf35ad8f79406550c" kindref="member">Vtd</ref> * <ref refid="group__PhysConstants_1gac23b2e72756f04ebf35ad8f79406550c" kindref="member">Vtd</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="175" column="16" bodyfile="inc/apfel/constants.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga86c3725f35a48aa7f47369b3b7656bd5" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vts2</definition>
        <argsstring></argsstring>
        <name>Vts2</name>
        <initializer>= <ref refid="group__PhysConstants_1gabecc31f706440da341d21c8b9cc6ef06" kindref="member">Vts</ref> * <ref refid="group__PhysConstants_1gabecc31f706440da341d21c8b9cc6ef06" kindref="member">Vts</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="176" column="16" bodyfile="inc/apfel/constants.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga694a0ef9dbfa68638fb7907cb009b61e" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::Vtb2</definition>
        <argsstring></argsstring>
        <name>Vtb2</name>
        <initializer>= <ref refid="group__PhysConstants_1gac5c24ac570b81c678e62397059b76970" kindref="member">Vtb</ref> * <ref refid="group__PhysConstants_1gac5c24ac570b81c678e62397059b76970" kindref="member">Vtb</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="177" column="16" bodyfile="inc/apfel/constants.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga3e0c3b2732a9cca26b9e8d4d39a80708" prot="public" static="no" mutable="no">
        <type>const std::vector&lt; double &gt;</type>
        <definition>const std::vector&lt;double&gt; apfel::CMK</definition>
        <argsstring></argsstring>
        <name>CMK</name>
        <initializer>= {<ref refid="group__PhysConstants_1ga17cef36fa67d4d37a6f1d1ddef76f4c2" kindref="member">Vud</ref>,  <ref refid="group__PhysConstants_1ga48046453b45fa8d4d1394e3e486534ed" kindref="member">Vus</ref>,  <ref refid="group__PhysConstants_1ga17cb3cfbb88992ac625240ab5733ac1f" kindref="member">Vub</ref>,  <ref refid="group__PhysConstants_1ga93a9ede3a64ebd31415751d712de4398" kindref="member">Vcd</ref>,  <ref refid="group__PhysConstants_1gafea926c054be18f99ad0e0d3541f4115" kindref="member">Vcs</ref>,  <ref refid="group__PhysConstants_1ga506a53fe1623cf4f364c4a8ffdbcfc3e" kindref="member">Vcb</ref>,  <ref refid="group__PhysConstants_1gac23b2e72756f04ebf35ad8f79406550c" kindref="member">Vtd</ref>,  <ref refid="group__PhysConstants_1gabecc31f706440da341d21c8b9cc6ef06" kindref="member">Vts</ref>,  <ref refid="group__PhysConstants_1gac5c24ac570b81c678e62397059b76970" kindref="member">Vtb</ref>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="178" column="21" bodyfile="inc/apfel/constants.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__PhysConstants_1ga5323493f8fa0c7f8bb81d386a7303b51" prot="public" static="no" mutable="no">
        <type>const std::vector&lt; double &gt;</type>
        <definition>const std::vector&lt;double&gt; apfel::CKM2</definition>
        <argsstring></argsstring>
        <name>CKM2</name>
        <initializer>= {<ref refid="group__PhysConstants_1ga5c8862e9d777c2c1c46ff10aa2524a6f" kindref="member">Vud2</ref>, <ref refid="group__PhysConstants_1ga21a05a52b2cb591650f2f32fa54e45cf" kindref="member">Vus2</ref>, <ref refid="group__PhysConstants_1ga6bd3a18d4f6fbcafc14aef9d39671e1a" kindref="member">Vub2</ref>, <ref refid="group__PhysConstants_1ga12d1c22c19e803e3eec405778128c2ee" kindref="member">Vcd2</ref>, <ref refid="group__PhysConstants_1ga5af6909cb7b869d1d4aa340575cdc7ee" kindref="member">Vcs2</ref>, <ref refid="group__PhysConstants_1ga837cff2f272cf9609bd6b488e06df60d" kindref="member">Vcb2</ref>, <ref refid="group__PhysConstants_1gaf229efc39c729da895d58d6b35c59958" kindref="member">Vtd2</ref>, <ref refid="group__PhysConstants_1ga86c3725f35a48aa7f47369b3b7656bd5" kindref="member">Vts2</ref>, <ref refid="group__PhysConstants_1ga694a0ef9dbfa68638fb7907cb009b61e" kindref="member">Vtb2</ref>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/constants.h" line="179" column="21" bodyfile="inc/apfel/constants.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>DGLAP object initializers</header>
      <description><para>Collection of functions that initialise <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> structure for the different kinds of evolution currently available. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1aaf2c9fc21fdc63421663a7859bc97e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> &gt;</type>
        <definition>std::map&lt;int, DglapObjects&gt; apfel::InitializeDglapObjectsQCD</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Masses, std::vector&lt; double &gt; const &amp;Thresholds, bool const &amp;OpEvol=false, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeDglapObjectsQCD</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Masses</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>OpEvol</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeDglapObjectsQCD function precomputes the perturbative coefficients of space-like unpolarised splitting functions and matching conditions and store them into a &apos;<ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Masses</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy-quark masses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OpEvol</parametername>
</parameternamelist>
<parameterdescription>
<para>the switch for the computation of the evolution operator (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of DglapObject objects, one for each possible nf </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglapbuilder.h" line="47" column="12" declfile="inc/apfel/dglapbuilder.h" declline="47" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a29107415091e14216f967d053d4127e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> &gt;</type>
        <definition>std::map&lt;int, DglapObjects&gt; apfel::InitializeDglapObjectsQCD</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, bool const &amp;OpEvol=false, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeDglapObjectsQCD</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>OpEvol</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeDglapObjectsQCD function precomputes the perturbative coefficients of space-like unpolarised splitting functions and matching conditions and store them into a &apos;<ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy-quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OpEvol</parametername>
</parameternamelist>
<parameterdescription>
<para>the switch for the computation of the evolution operator (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of DglapObject objects, one for each possible nf </para>
</simplesect>
<simplesect kind="note"><para>This function assumes that masses and thresholds coincide. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglapbuilder.h" line="64" column="12" declfile="inc/apfel/dglapbuilder.h" declline="64" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a7119fe155c51785e257daf30599abe50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> &gt;</type>
        <definition>std::map&lt;int, DglapObjects&gt; apfel::InitializeDglapObjectsQCDpol</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Masses, std::vector&lt; double &gt; const &amp;Thresholds, bool const &amp;OpEvol=false, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeDglapObjectsQCDpol</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Masses</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>OpEvol</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeDglapObjectsQCDpol function precomputes the perturbative coefficients of space-like longitudinally polarised splitting functions and matching conditions (assumed to be equal to the unpolarised ones) and store them into a &apos;<ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Masses</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy-quark masses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OpEvol</parametername>
</parameternamelist>
<parameterdescription>
<para>the switch for the computation of the evolution operator (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of DglapObject objects, one for each possible nf </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglapbuilder.h" line="82" column="12" declfile="inc/apfel/dglapbuilder.h" declline="82" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a0d66e26d88d049c5311b348e6a3733b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> &gt;</type>
        <definition>std::map&lt;int, DglapObjects&gt; apfel::InitializeDglapObjectsQCDpol</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, bool const &amp;OpEvol=false, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeDglapObjectsQCDpol</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>OpEvol</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeDglapObjectsQCDpol function precomputes the perturbative coefficients of space-like longitudinally polarised splitting functions and matching conditions (assumed to be equal to the unpolarised ones) and store them into a &apos;<ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy-quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OpEvol</parametername>
</parameternamelist>
<parameterdescription>
<para>the switch for the computation of the evolution operator (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of DglapObject objects, one for each possible nf </para>
</simplesect>
<simplesect kind="note"><para>This function assumes that masses and thresholds coincide. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglapbuilder.h" line="101" column="12" declfile="inc/apfel/dglapbuilder.h" declline="101" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a2cec7ad81a677c20e8321a0549d70c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> &gt;</type>
        <definition>std::map&lt;int, DglapObjects&gt; apfel::InitializeDglapObjectsQCDT</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Masses, std::vector&lt; double &gt; const &amp;Thresholds, bool const &amp;OpEvol=false, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeDglapObjectsQCDT</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Masses</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>OpEvol</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeDglapObjectsQCDT function precomputes the perturbative coefficients of time-like unpolarised splitting functions and matching conditions and store them into a &apos;<ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Masses</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy-quark masses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OpEvol</parametername>
</parameternamelist>
<parameterdescription>
<para>the switch for the computation of the evolution operator (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of DglapObject objects, one for each possible nf </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglapbuilder.h" line="118" column="12" declfile="inc/apfel/dglapbuilder.h" declline="118" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ad9cf8bd24ce79901ded4d8731dc6ddc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> &gt;</type>
        <definition>std::map&lt;int, DglapObjects&gt; apfel::InitializeDglapObjectsQCDT</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, bool const &amp;OpEvol=false, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeDglapObjectsQCDT</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>OpEvol</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeDglapObjectsQCDT function precomputes the perturbative coefficients of time-like unpolarised splitting functions and matching conditions and store them into a &apos;<ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy-quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OpEvol</parametername>
</parameternamelist>
<parameterdescription>
<para>the switch for the computation of the evolution operator (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of DglapObject objects, one for each possible nf </para>
</simplesect>
<simplesect kind="note"><para>This function assumes that masses and thresholds coincide. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglapbuilder.h" line="136" column="12" declfile="inc/apfel/dglapbuilder.h" declline="136" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a7a873005f11ff94f6164872c0c6d5580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> &gt;</type>
        <definition>std::map&lt;int, DglapObjects&gt; apfel::InitializeDglapObjectsQCDtrans</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Masses, std::vector&lt; double &gt; const &amp;Thresholds, bool const &amp;OpEvol=false, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeDglapObjectsQCDtrans</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Masses</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>OpEvol</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeDglapObjectsQCDtrans function precomputes the perturbative coefficients of space-like transverity splitting functions and matching conditions and store them into a &apos;<ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Masses</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy-quark masses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OpEvol</parametername>
</parameternamelist>
<parameterdescription>
<para>the switch for the computation of the evolution operator (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of DglapObject objects, one for each possible nf </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglapbuilder.h" line="153" column="12" declfile="inc/apfel/dglapbuilder.h" declline="153" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a345517446a415a9f76b30cb76591617b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> &gt;</type>
        <definition>std::map&lt;int, DglapObjects&gt; apfel::InitializeDglapObjectsQCDtrans</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, bool const &amp;OpEvol=false, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeDglapObjectsQCDtrans</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>OpEvol</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeDglapObjectsQCDtrans function precomputes the perturbative coefficients of space-like transverity splitting functions and matching conditions and store them into a &apos;<ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy-quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OpEvol</parametername>
</parameternamelist>
<parameterdescription>
<para>the switch for the computation of the evolution operator (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of DglapObject objects, one for each possible nf </para>
</simplesect>
<simplesect kind="note"><para>This function assumes that masses and thresholds coincide. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglapbuilder.h" line="171" column="12" declfile="inc/apfel/dglapbuilder.h" declline="171" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ab27caac59a543edbe2ce3553a66831ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> &gt;</type>
        <definition>std::map&lt;int, DglapObjects&gt; apfel::InitializeDglapObjectsQCDTtrans</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Masses, std::vector&lt; double &gt; const &amp;Thresholds, bool const &amp;OpEvol=false, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeDglapObjectsQCDTtrans</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Masses</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>OpEvol</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeDglapObjectsQCDtrans function precomputes the perturbative coefficients of timelike-like transverity splitting functions and matching conditions and store them into a &apos;<ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Masses</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy-quark masses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OpEvol</parametername>
</parameternamelist>
<parameterdescription>
<para>the switch for the computation of the evolution operator (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of DglapObject objects, one for each possible nf </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglapbuilder.h" line="188" column="12" declfile="inc/apfel/dglapbuilder.h" declline="188" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a8c14015eb7e81df14c516efc3fcf87d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> &gt;</type>
        <definition>std::map&lt;int, DglapObjects&gt; apfel::InitializeDglapObjectsQCDTtrans</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, bool const &amp;OpEvol=false, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeDglapObjectsQCDTtrans</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>OpEvol</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeDglapObjectsQCDtrans function precomputes the perturbative coefficients of time-like transverity splitting functions and matching conditions and store them into a &apos;<ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy-quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OpEvol</parametername>
</parameternamelist>
<parameterdescription>
<para>the switch for the computation of the evolution operator (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of DglapObject objects, one for each possible nf </para>
</simplesect>
<simplesect kind="note"><para>This function assumes that masses and thresholds coincide. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglapbuilder.h" line="206" column="12" declfile="inc/apfel/dglapbuilder.h" declline="206" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>DGLAP builders</header>
      <description><para>Collection of functions that build a <ref refid="classapfel_1_1Dglap" kindref="compound">Dglap</ref> object used to perform the DGLAP evolution of distributions or operators. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1ad66196392cf742bfd93e1faeedaf3e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classapfel_1_1Dglap" kindref="compound">Dglap</ref>&lt; <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt; &gt;</type>
        <definition>std::unique_ptr&lt;Dglap&lt;Distribution&gt; &gt; apfel::BuildDglap</definition>
        <argsstring>(std::map&lt; int, DglapObjects &gt; const &amp;DglapObj, std::function&lt; std::map&lt; int, double &gt;(double const &amp;, double const &amp;)&gt; const &amp;InDistFunc, double const &amp;MuRef, int const &amp;PerturbativeOrder, std::function&lt; double(double const &amp;)&gt; const &amp;Alphas, int const &amp;nsteps=10)</argsstring>
        <name>BuildDglap</name>
        <param>
          <type>std::map&lt; int, <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> &gt; const &amp;</type>
          <declname>DglapObj</declname>
        </param>
        <param>
          <type>std::function&lt; std::map&lt; int, double &gt;(double const &amp;, double const &amp;)&gt; const &amp;</type>
          <declname>InDistFunc</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>MuRef</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>Alphas</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nsteps</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>The BuildDglap function builds the actual dglap object that performs the DGLAP evolution for distributions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DglapObj</parametername>
</parameternamelist>
<parameterdescription>
<para>structure with the coefficients of the perturbative objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDistFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>the distributions at the reference scale </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MuRef</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference scale </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order of the evolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alphas</parametername>
</parameternamelist>
<parameterdescription>
<para>the function returning the strong coupling </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsteps</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of steps of the ODE solver (default: 10). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A unique pointer to a <ref refid="classapfel_1_1Dglap" kindref="compound">Dglap</ref> object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglapbuilder.h" line="229" column="19" declfile="inc/apfel/dglapbuilder.h" declline="229" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ad827529766bae9922f962aadf3c2fc87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classapfel_1_1Dglap" kindref="compound">Dglap</ref>&lt; <ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref> &gt; &gt;</type>
        <definition>std::unique_ptr&lt;Dglap&lt;Operator&gt; &gt; apfel::BuildDglap</definition>
        <argsstring>(std::map&lt; int, DglapObjects &gt; const &amp;DglapObj, double const &amp;MuRef, int const &amp;PerturbativeOrder, std::function&lt; double(double const &amp;)&gt; const &amp;Alphas, int const &amp;nsteps=10)</argsstring>
        <name>BuildDglap</name>
        <param>
          <type>std::map&lt; int, <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> &gt; const &amp;</type>
          <declname>DglapObj</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>MuRef</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>Alphas</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nsteps</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>The BuildDglap function builds the actual dglap object that performs the DGLAP evolution for operators. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DglapObj</parametername>
</parameternamelist>
<parameterdescription>
<para>structure with the coefficients of the perturbative objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MuRef</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference scale </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order of the evolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alphas</parametername>
</parameternamelist>
<parameterdescription>
<para>the function returning the strong coupling </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsteps</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of steps of the ODE solver (default: 10). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A unique pointer to a <ref refid="classapfel_1_1Dglap" kindref="compound">Dglap</ref> object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/dglapbuilder.h" line="246" column="19" declfile="inc/apfel/dglapbuilder.h" declline="246" declcolumn="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Ternary operators</header>
      <memberdef kind="function" id="namespaceapfel_1a3dd7edc0a38d72a704e8c1910e741ac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution apfel::operator*</definition>
        <argsstring>(double const &amp;s, Distribution rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Scalar*Distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="143" column="16" declfile="inc/apfel/distribution.h" declline="143" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aaa500facbcf4c0f7fe308ff744e9c51a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution apfel::operator*</definition>
        <argsstring>(Distribution lhs, double const &amp;s)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Distribution*Scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="144" column="16" declfile="inc/apfel/distribution.h" declline="144" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ac755f8ac8b722fa814e5bfbc276a6fa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution apfel::operator*</definition>
        <argsstring>(std::function&lt; double(double const &amp;)&gt; const &amp;f, Distribution rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Function*Distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="145" column="16" declfile="inc/apfel/distribution.h" declline="145" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a2b56802c59b0b6a8622f1823bc38a2f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution apfel::operator*</definition>
        <argsstring>(Distribution lhs, std::function&lt; double(double const &amp;)&gt; const &amp;f)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Distribution*Function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="146" column="16" declfile="inc/apfel/distribution.h" declline="146" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a051ae35acb69e292c5a13a2067f2df3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution apfel::operator/</definition>
        <argsstring>(Distribution lhs, double const &amp;s)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Distribution/Scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="147" column="16" declfile="inc/apfel/distribution.h" declline="147" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a598f0ef11a4768ba38533461ac080365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution apfel::operator+</definition>
        <argsstring>(Distribution lhs, Distribution const &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Distribution+Distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="148" column="16" declfile="inc/apfel/distribution.h" declline="148" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a7efb1151ea93c4823ca264ce9c5775fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution apfel::operator-</definition>
        <argsstring>(Distribution lhs, Distribution const &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Distribution-Distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="149" column="16" declfile="inc/apfel/distribution.h" declline="149" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a9b893308c29f61b885c87f924e0d4005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution apfel::operator*</definition>
        <argsstring>(Distribution lhs, Distribution const &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Distribution*Distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="150" column="16" declfile="inc/apfel/distribution.h" declline="150" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a931a7b06b66dd3eb35b9adb2bf6f19dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; B &gt;</type>
        <definition>DoubleObject&lt;B&gt; apfel::operator*</definition>
        <argsstring>(DoubleObject&lt; A &gt; lhs, DoubleObject&lt; B &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; A &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; B &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="173" column="16" bodyfile="inc/apfel/doubleobject.h" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a72528179cc378499781ad08e2f41c54b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
        <definition>DoubleObject&lt;T, U&gt; apfel::operator*</definition>
        <argsstring>(double const &amp;s, DoubleObject&lt; T, U &gt; rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="176" column="16" bodyfile="inc/apfel/doubleobject.h" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a6d7372c6adb5b9a4a057114b255d79b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
        <definition>DoubleObject&lt;T, U&gt; apfel::operator*</definition>
        <argsstring>(DoubleObject&lt; T, U &gt; lhs, double const &amp;s)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="179" column="16" bodyfile="inc/apfel/doubleobject.h" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aea32789bbe340a77e4460e3b125d005c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
        <definition>DoubleObject&lt;T, U&gt; apfel::operator/</definition>
        <argsstring>(double const &amp;s, DoubleObject&lt; T, U &gt; rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="182" column="16" bodyfile="inc/apfel/doubleobject.h" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aa8fe1803b1d37ae4868cdf6f48044a55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
        <definition>DoubleObject&lt;T, U&gt; apfel::operator/</definition>
        <argsstring>(DoubleObject&lt; T, U &gt; lhs, double const &amp;s)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="185" column="16" bodyfile="inc/apfel/doubleobject.h" bodystart="185" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1abf22ee199cb9b4e9546230c294dad09c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
        <definition>DoubleObject&lt;T, U&gt; apfel::operator*</definition>
        <argsstring>(DoubleObject&lt; T, U &gt; lhs, DoubleObject&lt; T, U &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="188" column="16" bodyfile="inc/apfel/doubleobject.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aa8d25b4da3db7ec3b1d0ec41b4acc2e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
        <definition>DoubleObject&lt;T, U&gt; apfel::operator+</definition>
        <argsstring>(DoubleObject&lt; T, U &gt; lhs, DoubleObject&lt; T, U &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="191" column="16" bodyfile="inc/apfel/doubleobject.h" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a7c28dc83bab70838e12f9eff8d67fe62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
        <definition>DoubleObject&lt;T, U&gt; apfel::operator-</definition>
        <argsstring>(DoubleObject&lt; T, U &gt; lhs, DoubleObject&lt; T, U &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="194" column="16" bodyfile="inc/apfel/doubleobject.h" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aaa133b64918aa6b61b5ca8ae3ee9342d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution apfel::operator*</definition>
        <argsstring>(Operator lhs, Distribution const &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator*Distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/operator.h" line="86" column="16" declfile="inc/apfel/operator.h" declline="86" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a746fded2cc1fe941688f62fb393d7759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
        <definition>Operator apfel::operator*</definition>
        <argsstring>(Operator lhs, Operator const &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator*Operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/operator.h" line="87" column="16" declfile="inc/apfel/operator.h" declline="87" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a04160710a953a30dfc9d57a635d3c9cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
        <definition>Operator apfel::operator*</definition>
        <argsstring>(double const &amp;s, Operator rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Scalar*Operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/operator.h" line="88" column="16" declfile="inc/apfel/operator.h" declline="88" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a9a184f1614f9dfa311709c8a16424a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
        <definition>Operator apfel::operator*</definition>
        <argsstring>(Operator lhs, double const &amp;s)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Operator*Scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/operator.h" line="89" column="16" declfile="inc/apfel/operator.h" declline="89" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ab2251569bc64fc3f0cbae3e2afc30fe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
        <definition>Operator apfel::operator*</definition>
        <argsstring>(std::function&lt; double(double const &amp;)&gt; f, Operator rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>function*Operator </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/operator.h" line="90" column="16" declfile="inc/apfel/operator.h" declline="90" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a79463c9d0e87f822a0f23e095cac4887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
        <definition>Operator apfel::operator*</definition>
        <argsstring>(Operator lhs, std::function&lt; double(double const &amp;)&gt; f)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Operator*function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/operator.h" line="91" column="16" declfile="inc/apfel/operator.h" declline="91" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ad848161c563c61abf9ac02bd925e946b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
        <definition>Operator apfel::operator/</definition>
        <argsstring>(Operator lhs, double const &amp;s)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Operator/Scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/operator.h" line="92" column="16" declfile="inc/apfel/operator.h" declline="92" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a5bbdbe0ac80a96715c2c5394fb5e1b1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
        <definition>Operator apfel::operator+</definition>
        <argsstring>(Operator lhs, Operator const &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator+Operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/operator.h" line="93" column="16" declfile="inc/apfel/operator.h" declline="93" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aed03bbeb18ed44d1f8b38f91bdf5a4f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
        <definition>Operator apfel::operator-</definition>
        <argsstring>(Operator lhs, Operator const &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator-Operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/operator.h" line="94" column="16" declfile="inc/apfel/operator.h" declline="94" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ac4678009f9bc339fac183ae0d1305592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; B &gt;</type>
        <definition>Set&lt;B&gt; apfel::operator*</definition>
        <argsstring>(Set&lt; A &gt; lhs, Set&lt; B &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; A &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; B &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="103" column="7" bodyfile="inc/apfel/set.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a54ef3d05e48e8fff9d1f29fda45fb83d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
        <definition>Set&lt;T&gt; apfel::operator*</definition>
        <argsstring>(double const &amp;s, Set&lt; T &gt; rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="107" column="7" bodyfile="inc/apfel/set.h" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a1695def4d1704d10cd610dc4a5273ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
        <definition>Set&lt;T&gt; apfel::operator*</definition>
        <argsstring>(Set&lt; T &gt; lhs, double const &amp;s)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="110" column="7" bodyfile="inc/apfel/set.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a00a5e53507e021fb22e90ea947457d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
        <definition>Set&lt;T&gt; apfel::operator*</definition>
        <argsstring>(std::function&lt; double(double const &amp;)&gt; f, Set&lt; T &gt; rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="113" column="7" bodyfile="inc/apfel/set.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aa39278b3b9c24b7c2891f901d157e8c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
        <definition>Set&lt;T&gt; apfel::operator*</definition>
        <argsstring>(Set&lt; T &gt; lhs, std::function&lt; double(double const &amp;)&gt; f)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="116" column="7" bodyfile="inc/apfel/set.h" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a9260615e73a7f384a5f908dd15ed4e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
        <definition>Set&lt;T&gt; apfel::operator*</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;v, Set&lt; T &gt; rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="119" column="7" bodyfile="inc/apfel/set.h" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ad5af21baa4f1a74e4b854116da5af295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
        <definition>Set&lt;T&gt; apfel::operator*</definition>
        <argsstring>(Set&lt; T &gt; lhs, std::vector&lt; double &gt; const &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="122" column="7" bodyfile="inc/apfel/set.h" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a1ed6d849655a39798f90edc6353e043e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
        <definition>Set&lt;T&gt; apfel::operator/</definition>
        <argsstring>(int const &amp;s, Set&lt; T &gt; rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>int const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="125" column="7" bodyfile="inc/apfel/set.h" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a863e15eb66bde6adedbd1f9ef4221a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
        <definition>Set&lt;T&gt; apfel::operator/</definition>
        <argsstring>(Set&lt; T &gt; lhs, double const &amp;s)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="128" column="7" bodyfile="inc/apfel/set.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a00f6252bd7dec0d77b15daa584374390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
        <definition>Set&lt;T&gt; apfel::operator*</definition>
        <argsstring>(Set&lt; T &gt; lhs, Set&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="131" column="7" bodyfile="inc/apfel/set.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a490a24b997e4b3645c30a3f21cdff233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
        <definition>Set&lt;T&gt; apfel::operator+</definition>
        <argsstring>(Set&lt; T &gt; lhs, Set&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="134" column="7" bodyfile="inc/apfel/set.h" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ac01196144b9b856067ed2c14f359a194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
        <definition>Set&lt;T&gt; apfel::operator-</definition>
        <argsstring>(Set&lt; T &gt; lhs, Set&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/set.h" line="137" column="7" bodyfile="inc/apfel/set.h" bodystart="137" bodyend="137"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Map of Distribution functions</header>
      <description><para>Function that return maps pf distributions. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1a3b75bf7eb5dca3f9b3c0319dfcf01d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt;</type>
        <definition>std::map&lt;int, Distribution&gt; apfel::DistributionMap</definition>
        <argsstring>(Grid const &amp;g, std::function&lt; std::map&lt; int, double &gt;(double const &amp;, double const &amp;)&gt; const &amp;InDistFunc, double const &amp;Q, std::vector&lt; int &gt; const &amp;skip={})</argsstring>
        <name>DistributionMap</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::function&lt; std::map&lt; int, double &gt;(double const &amp;, double const &amp;)&gt; const &amp;</type>
          <declname>InDistFunc</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>Q</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>skip</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Function that fills in a map of distributions from a map-valued function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDistFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>map-valued function dependent on x and a scale Q. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of Q in which InDistFunc has to be tabulated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skip</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of indices to be skipped in the tabulation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="166" column="12" declfile="inc/apfel/distribution.h" declline="166" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a03f4ce93e1b5a8ac5330dac29af2faaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt;</type>
        <definition>std::map&lt;int, Distribution&gt; apfel::DistributionMap</definition>
        <argsstring>(Grid const &amp;g, std::function&lt; std::map&lt; int, double &gt;(double const &amp;)&gt; const &amp;InDistFunc, std::vector&lt; int &gt; const &amp;skip={})</argsstring>
        <name>DistributionMap</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::function&lt; std::map&lt; int, double &gt;(double const &amp;)&gt; const &amp;</type>
          <declname>InDistFunc</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>skip</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Function that fills in a map of distributions from a map-valued function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDistFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>map-valued function dependent on x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skip</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of indices to be skipped in the tabulation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="178" column="12" declfile="inc/apfel/distribution.h" declline="178" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a8aa716012587c9b6591f2b08ef43ad3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt;</type>
        <definition>std::map&lt;int, Distribution&gt; apfel::DistributionMap</definition>
        <argsstring>(Grid const &amp;g, std::function&lt; std::vector&lt; double &gt;(double const &amp;)&gt; const &amp;InDistFunc, int const &amp;NOutputs=0)</argsstring>
        <name>DistributionMap</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::function&lt; std::vector&lt; double &gt;(double const &amp;)&gt; const &amp;</type>
          <declname>InDistFunc</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>NOutputs</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Function that fills in a map of distributions from a vector-valued function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDistFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>vector-valued function dependent on x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NOutputs</parametername>
</parameternamelist>
<parameterdescription>
<para>number of outputs of the input function (default: 0, that is unknown) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/distribution.h" line="189" column="12" declfile="inc/apfel/distribution.h" declline="189" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>GammaV anomalous dimension.</header>
      <description><para>Coefficients of the <gamma/><subscript>F</subscript> anomalous dimension. The expressions are taken from eq. (58) <ulink url="https://arxiv.org/pdf/1705.07167.pdf">https://arxiv.org/pdf/1705.07167.pdf</ulink>. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1a3b34f280328f0b4de2d2f13852e0cc4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::gammaFq0</definition>
        <argsstring>()</argsstring>
        <name>gammaFq0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quark <alpha/><subscript>s</subscript> term </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/gammaf.h" line="19" column="10" declfile="inc/apfel/gammaf.h" declline="19" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a656c0d0288ca35f9dee7209ec6983120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::gammaFq1</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>gammaFq1</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para>Quark <alpha/><subscript>s</subscript><superscript>2</superscript> term. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/gammaf.h" line="22" column="10" declfile="inc/apfel/gammaf.h" declline="22" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ab6ebafaf0ca47b4f60e880b3abd10982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::gammaFq2</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>gammaFq2</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para>Quark <alpha/><subscript>s</subscript><superscript>3</superscript> term. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/gammaf.h" line="25" column="10" declfile="inc/apfel/gammaf.h" declline="25" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a98d13eb1ba7bdb98857f4080621cbc2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::gammaFg0</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>gammaFg0</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para>Gluon <alpha/><subscript>s</subscript> term. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/gammaf.h" line="28" column="10" declfile="inc/apfel/gammaf.h" declline="28" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1afd3c1001719a8ea7eaba6a954579acc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::gammaFg1</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>gammaFg1</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para>Gluon <alpha/><subscript>s</subscript><superscript>2</superscript> term. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/gammaf.h" line="31" column="10" declfile="inc/apfel/gammaf.h" declline="31" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a00605d6700f9a0c44475b47ffaafce5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::gammaFg2</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>gammaFg2</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para>Gluon <alpha/><subscript>s</subscript><superscript>3</superscript> term. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/gammaf.h" line="34" column="10" declfile="inc/apfel/gammaf.h" declline="34" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cusp anomalous dimension.  Coefficients of the</header>
      <description><para><gamma/><subscript>K</subscript> anomalous dimension. The expressions up to O(<alpha/><subscript>s</subscript><superscript>3</superscript>) are taken from eq. (59) <ulink url="https://arxiv.org/pdf/1705.07167.pdf">https://arxiv.org/pdf/1705.07167.pdf</ulink>. While the expressions at are taken from O(<alpha/><subscript>s</subscript><superscript>4</superscript>) from eqs. (4.1) and (4.2) of <ulink url="https://arxiv.org/pdf/1805.09638.pdf">https://arxiv.org/pdf/1805.09638.pdf</ulink>. A better approximation to the O(<alpha/><subscript>s</subscript><superscript>4</superscript>) is found in <ulink url="https://arxiv.org/pdf/1912.12920v2.pdf">https://arxiv.org/pdf/1912.12920v2.pdf</ulink>. <simplesect kind="note"><para>All the expressions do not include an overall factor C<subscript>F</subscript> or C<subscript>A</subscript>. </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="namespaceapfel_1adb04f9a6878a8c5240845052c62173fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::gammaK0</definition>
        <argsstring>()</argsstring>
        <name>gammaK0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><alpha/><subscript>s</subscript> term </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/gammak.h" line="25" column="10" declfile="inc/apfel/gammak.h" declline="25" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a1d71ed0c9af587ce2347ad0ec798d64c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::gammaK1</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>gammaK1</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>2</superscript> term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/gammak.h" line="28" column="10" declfile="inc/apfel/gammak.h" declline="28" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1af871c9acc1435c63dd8ca7c6f5e19a69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::gammaK2</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>gammaK2</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>3</superscript> term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/gammak.h" line="31" column="10" declfile="inc/apfel/gammak.h" declline="31" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ab31f2c0a87feb4000e21747196348c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::gammaK3</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>gammaK3</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>4</superscript> term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/gammak.h" line="34" column="10" declfile="inc/apfel/gammak.h" declline="34" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ad5e5001f329b08d4beee52ad6e438574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::gammaK3gmq</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>gammaK3gmq</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><alpha/><subscript>s</subscript><superscript>4</superscript> correction to the gluon anonalous dimension (neglected for now). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/gammak.h" line="38" column="10" declfile="inc/apfel/gammak.h" declline="38" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>GPD object initializers</header>
      <description><para>Collection of functions that initialise <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> structure for the different kinds of GPD evolution currently available. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1a17981c015f455d5bfa6908a08d5698d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref> &gt;</type>
        <definition>std::map&lt;int, DglapObjects&gt; apfel::InitializeGpdObjects</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;xi, bool const &amp;OpEvol=false, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeGpdObjects</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>xi</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>OpEvol</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeGPDObjects function precomputes the perturbative coefficients of unpolarised GPD evolution kernels and store them into a &apos;<ref refid="structapfel_1_1DglapObjects" kindref="compound">DglapObjects</ref>&apos; structure. GPDs are assumed to be continuous over heavy-quark thresholds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xi</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the skewness </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OpEvol</parametername>
</parameternamelist>
<parameterdescription>
<para>the switch for the computation of the evolution operator (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of DglapObject objects, one for each possible nf </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/gpdbuilder.h" line="31" column="12" declfile="inc/apfel/gpdbuilder.h" declline="31" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Hard factors</header>
      <description><para>Collection of hard functions used in the defintion of the qT-dependent cross sections in TMD factorisation. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1a9a04135ceacbd54a578adafe245f346f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::H1DY</definition>
        <argsstring>()</argsstring>
        <name>H1DY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><alpha/><subscript>s</subscript> correction to the Drell-Yan hard factor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/hardfactors.h" line="18" column="10" declfile="inc/apfel/hardfactors.h" declline="18" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a735ee3570bf541e4402305dc6e297fbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::H2DY</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>H2DY</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>2</superscript> correction to the Drell-Yan hard factor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/hardfactors.h" line="21" column="10" declfile="inc/apfel/hardfactors.h" declline="21" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1acf86254c2695c9c2d47fefb21fcb266a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::H3DY</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>H3DY</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>3</superscript> correction to the Drell-Yan hard factor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/hardfactors.h" line="24" column="10" declfile="inc/apfel/hardfactors.h" declline="24" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ae14fed926a905ea5896014d56257d1ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::H1SIDIS</definition>
        <argsstring>()</argsstring>
        <name>H1SIDIS</name>
        <briefdescription>
<para><alpha/><subscript>s</subscript> correction to the SIDIS hard factor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/hardfactors.h" line="27" column="10" declfile="inc/apfel/hardfactors.h" declline="27" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a40189f00a10d6748899ca8abdfda1048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::H2SIDIS</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>H2SIDIS</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>2</superscript> correction to the SIDIS hard factor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/hardfactors.h" line="30" column="10" declfile="inc/apfel/hardfactors.h" declline="30" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a36ed35bdf1b3a33dfc55585e7b86c21b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::H3SIDIS</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>H3SIDIS</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>3</superscript> correction to the SIDIS hard factor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/hardfactors.h" line="33" column="10" declfile="inc/apfel/hardfactors.h" declline="33" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1acda6cf198bb399584e341771f1882837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::H3Ch</definition>
        <argsstring>()</argsstring>
        <name>H3Ch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><alpha/><subscript>s</subscript><superscript>3</superscript> charge-dependent correction to DY and SIDIS hard factor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/hardfactors.h" line="37" column="10" declfile="inc/apfel/hardfactors.h" declline="37" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a1d2ec0b3c77c30064a3ecbaa0b6e3b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::H1ggH</definition>
        <argsstring>()</argsstring>
        <name>H1ggH</name>
        <briefdescription>
<para><alpha/><subscript>s</subscript> correction to the H in gg fusion hard factor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/hardfactors.h" line="40" column="10" declfile="inc/apfel/hardfactors.h" declline="40" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a2d1795db1ecea6725ce2ce9b9ed6b147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::H2ggH</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>H2ggH</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>2</superscript> correction to the H in gg fusion hard factor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/hardfactors.h" line="43" column="10" declfile="inc/apfel/hardfactors.h" declline="43" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1abb62dde36bf4a2ba35bf7dead959b504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::HardFactorDY</definition>
        <argsstring>(int const &amp;PerturbativeOrder, double const &amp;Alphas, int const &amp;nf, double const &amp;kappa)</argsstring>
        <name>HardFactorDY</name>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>Alphas</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>kappa</declname>
        </param>
        <briefdescription>
<para>Perturbative hard factor for Drell-Yan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alphas</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the strong coupling </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nf</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of active flavours </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kappa</parametername>
</parameternamelist>
<parameterdescription>
<para>the ration between hard scale and renormalusation scale </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hard factor for Drell-Yan. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tmdbuilder.h" line="243" column="10" declfile="inc/apfel/tmdbuilder.h" declline="243" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Collins-Soper anomalous dimension.</header>
      <description><para>Coefficients of the Collins-Soper anomalous dimension. The expressions are taken from eq. (69) <ulink url="https://arxiv.org/pdf/1705.07167.pdf">https://arxiv.org/pdf/1705.07167.pdf</ulink> and from eq (D.9) of <ulink url="https://arxiv.org/pdf/1604.07869.pdf">https://arxiv.org/pdf/1604.07869.pdf</ulink>. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1a4163b1f2131459b6f398b36786544129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::KCS00</definition>
        <argsstring>()</argsstring>
        <name>KCS00</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><alpha/><subscript>s</subscript> term </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/kcs.h" line="20" column="10" declfile="inc/apfel/kcs.h" declline="20" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aa5dc72368719279cdcf958ad4d63d89c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::KCS01</definition>
        <argsstring>()</argsstring>
        <name>KCS01</name>
        <briefdescription>
<para><alpha/><subscript>s</subscript>L term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/kcs.h" line="23" column="10" declfile="inc/apfel/kcs.h" declline="23" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aa96a9256f2cc5b776b7ad4f42791ae82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::KCS10</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>KCS10</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>2</superscript> term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/kcs.h" line="26" column="10" declfile="inc/apfel/kcs.h" declline="26" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a52090d3daac7a0c649763fc3dcdb0634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::KCS11</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>KCS11</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>2</superscript>L term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/kcs.h" line="29" column="10" declfile="inc/apfel/kcs.h" declline="29" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1afd12d30f059ee82e1be4dea16dd5eb9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::KCS12</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>KCS12</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>2</superscript>L<superscript>2</superscript> term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/kcs.h" line="32" column="10" declfile="inc/apfel/kcs.h" declline="32" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a5052d0b2c2bbf27a0e92a9c3afff6656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::KCS20</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>KCS20</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>3</superscript> term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/kcs.h" line="35" column="10" declfile="inc/apfel/kcs.h" declline="35" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aebb53a96d45ff6f3856b8cc7742e4415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::KCS21</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>KCS21</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>3</superscript>L term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/kcs.h" line="38" column="10" declfile="inc/apfel/kcs.h" declline="38" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a61458485ca8daf8dffe8c29b5eb09445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::KCS22</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>KCS22</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>3</superscript>L<superscript>2</superscript> term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/kcs.h" line="41" column="10" declfile="inc/apfel/kcs.h" declline="41" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ae49419a976e5af333b7a77d98e7ecb67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::KCS23</definition>
        <argsstring>(int const &amp;nf)</argsstring>
        <name>KCS23</name>
        <param>
          <type>int const &amp;</type>
          <declname>nf</declname>
        </param>
        <briefdescription>
<para><alpha/><subscript>s</subscript><superscript>3</superscript>L<superscript>3</superscript> term </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/kcs.h" line="44" column="10" declfile="inc/apfel/kcs.h" declline="44" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Message functions</header>
      <description><para>Collection of functions related to the verbosity of the code. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1a98ed5a19c9415624721b81f46f1f1afa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apfel::SetVerbosityLevel</definition>
        <argsstring>(int const &amp;vl)</argsstring>
        <name>SetVerbosityLevel</name>
        <param>
          <type>int const &amp;</type>
          <declname>vl</declname>
        </param>
        <briefdescription>
<para><ref refid="classapfel_1_1Set" kindref="compound">Set</ref> Verbosity level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vl</parametername>
</parameternamelist>
<parameterdescription>
<para>verbosity level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>possible values of vl: LOW = No informative and warning messages are displayed. Error messages are printed anyway MEDIUM = No informative messages are displayed. Warning and error messages are printed HIGH = All messages are displayed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/messages.h" line="30" column="8" declfile="inc/apfel/messages.h" declline="30" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a72b6a7944341cd1a463f55c3330eeb82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apfel::GetVerbosityLevel</definition>
        <argsstring>()</argsstring>
        <name>GetVerbosityLevel</name>
        <briefdescription>
<para>Get Verbosity level. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the current verbosity level </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/messages.h" line="36" column="7" declfile="inc/apfel/messages.h" declline="36" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a62f83f74838eef98fea91291a962741d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apfel::report</definition>
        <argsstring>(std::string const &amp;what)</argsstring>
        <name>report</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Function that prints information on screen. Effective according to the verbosity level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to report </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/messages.h" line="43" column="8" declfile="inc/apfel/messages.h" declline="43" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aee87ffcb49965c229fbf10c0c5f83ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apfel::info</definition>
        <argsstring>(std::string const &amp;tag, std::string const &amp;what)</argsstring>
        <name>info</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Function that prints information on screen. Effective according to the verbosity level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the emitter of the message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to report </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/messages.h" line="51" column="8" declfile="inc/apfel/messages.h" declline="51" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a8957d7723906083aa7e5a3a3483e443c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apfel::warning</definition>
        <argsstring>(std::string const &amp;tag, std::string const &amp;what)</argsstring>
        <name>warning</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Function that prints warnings on screen. Effective according to the verbosity level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the emitter of the message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>the warning to report </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/messages.h" line="59" column="8" declfile="inc/apfel/messages.h" declline="59" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a82544bb00b63654826d2fa658d052414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string apfel::error</definition>
        <argsstring>(std::string const &amp;tag, std::string const &amp;what)</argsstring>
        <name>error</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Function that prints information on screen. Always effective. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that generates the error </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>the error to report </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the error message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/messages.h" line="68" column="15" declfile="inc/apfel/messages.h" declline="68" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a4c2d1010b19712c8c950c6aed5db7c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apfel::Banner</definition>
        <argsstring>()</argsstring>
        <name>Banner</name>
        <briefdescription>
<para>Function that prints the APFEL++ banner on screen. Effective according to the verbosity level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/messages.h" line="74" column="8" declfile="inc/apfel/messages.h" declline="74" declcolumn="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Runge-Kutta (RK) ODE solvers.</header>
      <description><para>These functions solve the ordinary differential equation (ODE):</para>
<para>dy / dt = f(t,y)</para>
<para>where:</para>
<para>dy = rk4(f(t,y))</para>
<para>so differentiation between lower and upper:</para>
<para>y += dy(t,y,dt)</para>
<para>U is the type of the &apos;y&apos; object. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1a05570e0782ff69b5ea545dec32e25a79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>std::function&lt; U(double const  &amp;, U const  &amp;, double const  &amp;)&gt;</type>
        <definition>std::function&lt;U(double const&amp;, U const&amp;, double const&amp;)&gt; apfel::rk4</definition>
        <argsstring>(std::function&lt; U(double const &amp;t, U const &amp;Obj)&gt; const &amp;f)</argsstring>
        <name>rk4</name>
        <param>
          <type>std::function&lt; U(double const &amp;t, U const &amp;Obj)&gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Template function that implements the fourth order RK algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function on the r.h.s. of the ODE </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the function tha returns the step </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/ode.h" line="36" column="3" bodyfile="inc/apfel/ode.h" bodystart="36" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a825d60d65a4d5defeaacf6bf0c63aed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>std::function&lt; U(double const  &amp;, U const  &amp;, double const  &amp;)&gt;</type>
        <definition>std::function&lt;U(double const&amp;, U const&amp;, double const&amp;)&gt; apfel::rk1</definition>
        <argsstring>(std::function&lt; U(double const &amp;t, U const &amp;Obj)&gt; const &amp;f)</argsstring>
        <name>rk1</name>
        <param>
          <type>std::function&lt; U(double const &amp;t, U const &amp;Obj)&gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Template function that implements the first order RK algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function on the r.h.s. of the ODE </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the function tha returns the step </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/ode.h" line="61" column="3" bodyfile="inc/apfel/ode.h" bodystart="61" bodyend="64"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Basis rotations</header>
      <description><para>Collection of functions to rotate distributions from the QCD evolution basis to the phsycal basis and back. Specifically, the QCD evolution basis is:</para>
<para>{g, <Sigma/>, V, T<subscript>3</subscript>, V<subscript>3</subscript>, T<subscript>8</subscript>, V<subscript>8</subscript>, T<subscript>15</subscript>, V<subscript>15</subscript>, T<subscript>24</subscript>, V<subscript>24</subscript>, T<subscript>35</subscript>, T<subscript>34</subscript>}</para>
<para>while the physical basis is:</para>
<para>{ t, b, c, s, u, d, g, d, u, s, c, b, t} </para>
</description>
      <memberdef kind="variable" id="namespaceapfel_1ac8d9079ba80f60896850b527fee1c74b" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::RotQCDEvToPhys[6][6]</definition>
        <argsstring>[6][6]</argsstring>
        <name>RotQCDEvToPhys</name>
        <initializer>=
  {
    {1./6., -1./2.,  1./6., 1./12., 1./20., 1./30.},    
    {1./6.,  1./2.,  1./6., 1./12., 1./20., 1./30.},    
    {1./6.,     0., -1./3., 1./12., 1./20., 1./30.},    
    {1./6.,     0.,     0., -1./4., 1./20., 1./30.},    
    {1./6.,     0.,     0.,     0., -1./5., 1./30.},    
    {1./6.,     0.,     0.,     0.,     0., -1./6.}     
  }</initializer>
        <briefdescription>
<para>Rotation matrix from the QCD evolution to the physical basis. Inverse of RotPhysToQCDEv. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/rotations.h" line="38" column="16" bodyfile="inc/apfel/rotations.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceapfel_1a762f84c466d2a6e299d13d0ac7847eeb" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::RotQCDEvToPhysFull[13][13]</definition>
        <argsstring>[13][13]</argsstring>
        <name>RotQCDEvToPhysFull</name>
        <initializer>=
  {
    { 0.,  1./12., -1./12.,     0.,     0.,      0.,      0.,      0.,      0.,     0.,       0., -1./12.,  1./12.},
    { 0.,  1./12., -1./12.,     0.,     0.,      0.,      0.,      0.,      0., -1./10.,  1./10.,  1./60., -1./60.},
    { 0.,  1./12., -1./12.,     0.,     0.,      0.,      0.,  -1./8.,   1./8.,  1./40., -1./40.,  1./60., -1./60.},
    { 0.,  1./12., -1./12.,     0.,     0.,  -1./6.,   1./6.,  1./24., -1./24.,  1./40., -1./40.,  1./60., -1./60.},
    { 0.,  1./12., -1./12.,  1./4., -1./4.,  1./12., -1./12.,  1./24., -1./24.,  1./40., -1./40.,  1./60., -1./60.},
    { 0.,  1./12., -1./12., -1./4.,  1./4.,  1./12., -1./12.,  1./24., -1./24.,  1./40., -1./40.,  1./60., -1./60.},
    { 1.,      0.,      0.,     0.,     0.,      0.,      0.,      0.,      0.,     0.,       0.,      0.,      0.},
    { 0.,  1./12.,  1./12., -1./4., -1./4.,  1./12.,  1./12.,  1./24.,  1./24.,  1./40.,  1./40.,  1./60.,  1./60.},
    { 0.,  1./12.,  1./12.,  1./4.,  1./4.,  1./12.,  1./12.,  1./24.,  1./24.,  1./40.,  1./40.,  1./60.,  1./60.},
    { 0.,  1./12.,  1./12.,     0.,     0.,  -1./6.,  -1./6.,  1./24.,  1./24.,  1./40.,  1./40.,  1./60.,  1./60.},
    { 0.,  1./12.,  1./12.,     0.,     0.,      0.,      0.,  -1./8.,  -1./8.,  1./40.,  1./40.,  1./60.,  1./60.},
    { 0.,  1./12.,  1./12.,     0.,     0.,      0.,      0.,      0.,      0., -1./10., -1./10.,  1./60.,  1./60.},
    { 0.,  1./12.,  1./12.,     0.,     0.,      0.,      0.,      0.,      0.,     0.,       0., -1./12., -1./12.}
  }</initializer>
        <briefdescription>
<para>Rotation matrix from the QCD evolution to the physical basis for the full bases. Inverse of RotPhysToQCDEvFull. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/rotations.h" line="52" column="16" bodyfile="inc/apfel/rotations.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceapfel_1a6418419e3f1b9d048265a8dd89bc323b" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::RotPhysToQCDEv[6][6]</definition>
        <argsstring>[6][6]</argsstring>
        <name>RotPhysToQCDEv</name>
        <initializer>=
  {
    {  1.,  1.,  1.,  1.,  1.,  1.},    
    { -1.,  1.,  0.,  0.,  0.,  0.},    
    {  1.,  1., -2.,  0.,  0.,  0.},    
    {  1.,  1.,  1., -3.,  0.,  0.},    
    {  1.,  1.,  1.,  1., -4.,  0.},    
    {  1.,  1.,  1.,  1.,  1., -5.}     
  }</initializer>
        <briefdescription>
<para>Rotation matrix from the physical to the QCD evolution basis. Inverse of RotQCDEvToPhys. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/rotations.h" line="73" column="16" bodyfile="inc/apfel/rotations.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceapfel_1a8a795b13251f5b660156b521f5ad6cf5" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double apfel::RotPhysToQCDEvFull[13][13]</definition>
        <argsstring>[13][13]</argsstring>
        <name>RotPhysToQCDEvFull</name>
        <initializer>=
  {
    
    {  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.},   
    {  1.,  1.,  1.,  1.,  1.,  1.,  0.,  1.,  1.,  1.,  1.,  1.,  1.},   
    { -1., -1., -1., -1., -1., -1.,  0.,  1.,  1.,  1.,  1.,  1.,  1.},   
    {  0.,  0.,  0.,  0.,  1., -1.,  0., -1.,  1.,  0.,  0.,  0.,  0.},   
    {  0.,  0.,  0.,  0., -1.,  1.,  0., -1.,  1.,  0.,  0.,  0.,  0.},   
    {  0.,  0.,  0., -2.,  1.,  1.,  0.,  1.,  1., -2.,  0.,  0.,  0.},   
    {  0.,  0.,  0.,  2., -1., -1.,  0.,  1.,  1., -2.,  0.,  0.,  0.},   
    {  0.,  0., -3.,  1.,  1.,  1.,  0.,  1.,  1.,  1., -3.,  0.,  0.},   
    {  0.,  0.,  3., -1., -1., -1.,  0.,  1.,  1.,  1., -3.,  0.,  0.},   
    {  0., -4.,  1.,  1.,  1.,  1.,  0.,  1.,  1.,  1.,  1., -4.,  0.},   
    {  0.,  4., -1., -1., -1., -1.,  0.,  1.,  1.,  1.,  1., -4.,  0.},   
    { -5.,  1.,  1.,  1.,  1.,  1.,  0.,  1.,  1.,  1.,  1.,  1., -5.},   
    {  5., -1., -1., -1., -1., -1.,  0.,  1.,  1.,  1.,  1.,  1., -5.}    
  }</initializer>
        <briefdescription>
<para>Rotation matrix from the physical to the QCD evolution basis for the full bases. Inverse of RotQCDEvToPhysFull. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/rotations.h" line="87" column="16" bodyfile="inc/apfel/rotations.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a9cbdcadbb5a4c8c58f99aa17c7f2b3a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, double &gt;</type>
        <definition>std::map&lt;int, double&gt; apfel::PhysToQCDEv</definition>
        <argsstring>(std::map&lt; int, double &gt; const &amp;InPhysMap)</argsstring>
        <name>PhysToQCDEv</name>
        <param>
          <type>std::map&lt; int, double &gt; const &amp;</type>
          <declname>InPhysMap</declname>
        </param>
        <briefdescription>
<para>Rotation from the physical to the QCD evolution basis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>InPhysMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the map in the physical basis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The map in the QCD evolution basis </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/rotations.h" line="110" column="12" declfile="inc/apfel/rotations.h" declline="110" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ad76927a1e32317b53521d5a23396954d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, double &gt;</type>
        <definition>std::map&lt;int, double&gt; apfel::QCDEvToPhys</definition>
        <argsstring>(std::map&lt; int, double &gt; const &amp;QCDEvMap)</argsstring>
        <name>QCDEvToPhys</name>
        <param>
          <type>std::map&lt; int, double &gt; const &amp;</type>
          <declname>QCDEvMap</declname>
        </param>
        <briefdescription>
<para>Rotation from the QCD evolution to the physical basis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>QCDEvMap</parametername>
</parameternamelist>
<parameterdescription>
<para>The map in the QCD evolution basis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the map in the physical basis </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/rotations.h" line="117" column="12" declfile="inc/apfel/rotations.h" declline="117" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a5994d25259a42b0eac53c4785602a7ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt;</type>
        <definition>std::map&lt;int, Distribution&gt; apfel::QCDEvToPhys</definition>
        <argsstring>(std::map&lt; int, Distribution &gt; const &amp;QCDEvMap)</argsstring>
        <name>QCDEvToPhys</name>
        <param>
          <type>std::map&lt; int, <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt; const &amp;</type>
          <declname>QCDEvMap</declname>
        </param>
        <briefdescription>
<para>Rotation from the QCD evolution to the physical basis of a map of distributions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>QCDEvMap</parametername>
</parameternamelist>
<parameterdescription>
<para>The map of distributions in the QCD evolution basis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the map of distributions in the physical basis </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/rotations.h" line="125" column="12" declfile="inc/apfel/rotations.h" declline="125" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ae880a5fcf92d056c294f003accfb08ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref> &gt;</type>
        <definition>std::map&lt;int, Operator&gt; apfel::QCDEvToPhys</definition>
        <argsstring>(std::map&lt; int, Operator &gt; const &amp;QCDEvMap)</argsstring>
        <name>QCDEvToPhys</name>
        <param>
          <type>std::map&lt; int, <ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref> &gt; const &amp;</type>
          <declname>QCDEvMap</declname>
        </param>
        <briefdescription>
<para>Rotation from the QCD evolution to the physical basis of a map of operators. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>QCDEvMap</parametername>
</parameternamelist>
<parameterdescription>
<para>The map of operatoirs in the QCD evolution basis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the map of operators in the physical basis </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/rotations.h" line="133" column="12" declfile="inc/apfel/rotations.h" declline="133" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Fortran harmonic polylogarithms</header>
      <description><para>Harmonic polylogarithms up to weight five</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>real input argument </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nw</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of weights requested </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Hr1</parametername>
</parameternamelist>
<parameterdescription>
<para>weight 1 harmonic polylogs (1D array) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Hr2</parametername>
</parameternamelist>
<parameterdescription>
<para>weight 2 harmonic polylogs (2D array) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Hr3</parametername>
</parameternamelist>
<parameterdescription>
<para>weight 3 harmonic polylogs (3D array) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Hr4</parametername>
</parameternamelist>
<parameterdescription>
<para>weight 4 harmonic polylogs (4D array) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Hr5</parametername>
</parameternamelist>
<parameterdescription>
<para>weight 5 harmonic polylogs (5D array) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n1</parametername>
</parameternamelist>
<parameterdescription>
<para>lower bound of the weight index requested </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n2</parametername>
</parameternamelist>
<parameterdescription>
<para>upper bound of the weight index requested </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This is just a suitably formatted wrapper of the original fortran function (see src/kernel/hplog.f) to facilitate the call of the harmonic logarithms from a C++ code. </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="namespaceapfel_1aa1685c13685dacd7387aa325c786678b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::apf_hplog_</definition>
        <argsstring>(double *wx, int *wnw, double *Hr1, double *Hr2, double *Hr3, double *Hr4, double *Hr5, int *wn1, int *wn2)</argsstring>
        <name>apf_hplog_</name>
        <param>
          <type>double *</type>
          <declname>wx</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>wnw</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Hr1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Hr2</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Hr3</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Hr4</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Hr5</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>wn1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>wn2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/specialfunctions.h" line="32" column="12" declfile="inc/apfel/specialfunctions.h" declline="32" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Special functions</header>
      <description><para>Collection of special functions needed in the evaluation of some expressions. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1a892a0ab473cc1c2933458ae7b02909f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::dilog</definition>
        <argsstring>(double const &amp;x)</argsstring>
        <name>dilog</name>
        <param>
          <type>double const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Real dilogarithm <formula id="10">$\mathrm{Li}_2(z)$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the real argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><formula id="10">$\mathrm{Li}_2(z)$</formula> </para>
</simplesect>
<simplesect kind="note"><para>Implementation translated by R.Brun from CERNLIB DILOG function C332. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/specialfunctions.h" line="47" column="10" declfile="inc/apfel/specialfunctions.h" declline="47" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ae07fc6dc7c2b19aaeae0957f7afa9ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::wgplg</definition>
        <argsstring>(int const &amp;n, int const &amp;p, double const &amp;x)</argsstring>
        <name>wgplg</name>
        <param>
          <type>int const &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function for the computation of the Nielsen&apos;s generalized dilogs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>integer argument </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>integer argument </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>real argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><formula id="11">$\mathrm{S}_{n,p}(x)$</formula> </para>
</simplesect>
<simplesect kind="note"><para>Implementation translated from CERNLIB WGPLG. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/specialfunctions.h" line="57" column="10" declfile="inc/apfel/specialfunctions.h" declline="57" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1abde00ad78affecc4bbe4e4e5996b820a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::hpoly</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;w, double const &amp;x)</argsstring>
        <name>hpoly</name>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function for the computation of the Harmonic polylogs up to weight 5. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of weights </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>real argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><formula id="12">$\mathrm{H}(\{w\},x)$</formula> </para>
</simplesect>
<simplesect kind="note"><para>C++ adaptation of the FORTRAN implementation discussed in <ulink url="https://arxiv.org/pdf/1809.07084.pdf">https://arxiv.org/pdf/1809.07084.pdf</ulink>. The argument x is limited to the interval [0, sqrt(2)-1]. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/specialfunctions.h" line="69" column="10" declfile="inc/apfel/specialfunctions.h" declline="69" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a4952d6daa86b59a050d8cdc3b49eb59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apfel::HPLogMap</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;w)</argsstring>
        <name>HPLogMap</name>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Function that returns the index to be used with unidimensional arrays returned by hplog_. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>the packed vector of weights </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/specialfunctions.h" line="76" column="7" declfile="inc/apfel/specialfunctions.h" declline="76" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ad33ee04bf2cf8dd901e69d0a94ab533f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; apfel::UnpackWeights</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;w)</argsstring>
        <name>UnpackWeights</name>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Function that returns the unpacked weights of the HPL given the input vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>the packed vector of weights </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/specialfunctions.h" line="83" column="15" declfile="inc/apfel/specialfunctions.h" declline="83" declcolumn="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>DIS structure function object initializers</header>
      <description><para>Collection of functions that initialise <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref> structure for the different kinds of structure functions available. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1a6cdbaf2a572767fc8d2901b20f03e7c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeF2NCObjectsZM</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeF2NCObjectsZM</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeF2NCObjectsZM precomputes the perturbative coefficients of coefficient functions for NC F2 in the ZM scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="47" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="47" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a0dd97cfdfd06c2fefd02bc64a8aa6cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeFLNCObjectsZM</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeFLNCObjectsZM</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeFLNCObjectsZM precomputes the perturbative coefficients of coefficient functions for NC FL in the ZM scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="60" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="60" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a76042a24523c60d7e5367f48984a8a7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeF3NCObjectsZM</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeF3NCObjectsZM</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeF3NCObjectsZM precomputes the perturbative coefficients of coefficient functions for NC xF3 in the ZM scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="73" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="73" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aeba8c44495e37abd657fc925042da7a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeF2CCPlusObjectsZM</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeF2CCPlusObjectsZM</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeF2CCPlusObjectsZM precomputes the perturbative coefficients of coefficient functions for combination ( F2(nu) + F2(nubar) ) / 2 in the ZM scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="87" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="87" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ace57bb10aac2e353accc2790a053d12a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeF2CCMinusObjectsZM</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeF2CCMinusObjectsZM</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeF2CCMinusObjectsZM precomputes the perturbative coefficients of coefficient functions for combination ( F2(nu) - F2(nubar) ) / 2 in the ZM scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="101" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="101" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a0c39e7e50c1d77027e58def618311d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeFLCCPlusObjectsZM</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeFLCCPlusObjectsZM</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeFLCCPlusObjectsZM precomputes the perturbative coefficients of coefficient functions for combination ( FL(nu) + FL(nubar) ) / 2 in the ZM scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="115" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="115" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a609f39b82b52a5e038525d6fd1bdc7ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeFLCCMinusObjectsZM</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeFLCCMinusObjectsZM</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeFLCCMinusObjectsZM precomputes the perturbative coefficients of coefficient functions for combination ( FL(nu) - FL(nubar) ) / 2 in the ZM scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="129" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="129" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a83f1992cb3edf56399fbf900cea753c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeF3CCPlusObjectsZM</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeF3CCPlusObjectsZM</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeF3CCPlusObjectsZM precomputes the perturbative coefficients of coefficient functions for combination ( F3(nu) + F3(nubar) ) / 2 in the ZM scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="143" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="143" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a95eb0fbc9ef5188897b97b3257f5c9f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeF3CCMinusObjectsZM</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeF3CCMinusObjectsZM</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeF3CCMinusObjectsZM precomputes the perturbative coefficients of coefficient functions for combination ( F3(nu) - F3(nubar) ) / 2 in the ZM scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="157" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="157" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ac1204473402b48b386481f0189651b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeF2NCObjectsMassive</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Masses, double const &amp;IntEps=1e-5, int const &amp;nxi=150, double const &amp;ximin=0.001, double const &amp;ximax=100000, int const &amp;intdeg=3, double const &amp;lambda=0.0005)</argsstring>
        <name>InitializeF2NCObjectsMassive</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Masses</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nxi</declname>
          <defval>150</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>ximin</declname>
          <defval>0.001</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>ximax</declname>
          <defval>100000</defval>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>intdeg</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>lambda</declname>
          <defval>0.0005</defval>
        </param>
        <briefdescription>
<para>The InitializeF2NCObjectsMassive precomputes the perturbative coefficients of coefficient functions for combination NC F2 in the massive scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Masses</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark masses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nxi</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of nodes of the grid in <xi/> = Q<superscript>2</superscript>/M<superscript>2</superscript> (default: 150) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ximin</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound of the grid in <xi/> (default: 0.001) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ximax</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound of the grid in <xi/> (default: 100000) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intdeg</parametername>
</parameternamelist>
<parameterdescription>
<para>the interpolation degree on the grid in <xi/> (default: 3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the parameter in the function ln(ln(<xi/>/<Lambda/><superscript>2</superscript>)) used for the tabulation (default: 0.0005) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="176" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="176" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a584eb3a644598895a1f1cef25f279358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeFLNCObjectsMassive</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Masses, double const &amp;IntEps=1e-5, int const &amp;nxi=150, double const &amp;ximin=0.001, double const &amp;ximax=100000, int const &amp;intdeg=3, double const &amp;lambda=0.0005)</argsstring>
        <name>InitializeFLNCObjectsMassive</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Masses</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nxi</declname>
          <defval>150</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>ximin</declname>
          <defval>0.001</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>ximax</declname>
          <defval>100000</defval>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>intdeg</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>lambda</declname>
          <defval>0.0005</defval>
        </param>
        <briefdescription>
<para>The InitializeFLNCObjectsMassive precomputes the perturbative coefficients of coefficient functions for combination NC FL in the massive scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Masses</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark masses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nxi</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of nodes of the grid in <xi/> = Q<superscript>2</superscript>/M<superscript>2</superscript> (default: 150) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ximin</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound of the grid in <xi/> (default: 0.001) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ximax</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound of the grid in <xi/> (default: 100000) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intdeg</parametername>
</parameternamelist>
<parameterdescription>
<para>the interpolation degree on the grid in <xi/> (default: 3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the parameter in the function ln(ln(<xi/>/<Lambda/><superscript>2</superscript>)) used for the tabulation (default: 0.0005) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="200" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="200" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a7cc40593ef9cc157ed107cebcb4bbe47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeF2NCObjectsMassiveZero</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Masses, double const &amp;IntEps=1e-5, int const &amp;nxi=150, double const &amp;ximin=0.001, double const &amp;ximax=100000, int const &amp;intdeg=3, double const &amp;lambda=0.0005)</argsstring>
        <name>InitializeF2NCObjectsMassiveZero</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Masses</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nxi</declname>
          <defval>150</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>ximin</declname>
          <defval>0.001</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>ximax</declname>
          <defval>100000</defval>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>intdeg</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>lambda</declname>
          <defval>0.0005</defval>
        </param>
        <briefdescription>
<para>The InitializeF2NCObjectsMassiveZero precomputes the perturbative coefficients of coefficient functions for combination NC F2 in the massless limit of the massive scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Masses</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark masses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nxi</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of nodes of the grid in <xi/> = Q<superscript>2</superscript>/M<superscript>2</superscript> (default: 150) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ximin</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound of the grid in <xi/> (default: 0.001) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ximax</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound of the grid in <xi/> (default: 100000) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intdeg</parametername>
</parameternamelist>
<parameterdescription>
<para>the interpolation degree on the grid in <xi/> (default: 3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the parameter in the function ln(ln(<xi/>/<Lambda/><superscript>2</superscript>)) used for the tabulation (default: 0.0005) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="224" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="224" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a66ca8833b7ba563e3c75ad7fdafc1e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeFLNCObjectsMassiveZero</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Masses, double const &amp;IntEps=1e-5, int const &amp;nxi=150, double const &amp;ximin=0.001, double const &amp;ximax=100000, int const &amp;intdeg=3, double const &amp;lambda=0.0005)</argsstring>
        <name>InitializeFLNCObjectsMassiveZero</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Masses</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nxi</declname>
          <defval>150</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>ximin</declname>
          <defval>0.001</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>ximax</declname>
          <defval>100000</defval>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>intdeg</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>lambda</declname>
          <defval>0.0005</defval>
        </param>
        <briefdescription>
<para>The InitializeFLNCObjectsMassiveZero precomputes the perturbative coefficients of coefficient functions for combination NC FL in the massless limit of the massive scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Masses</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark masses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nxi</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of nodes of the grid in <xi/> = Q<superscript>2</superscript>/M<superscript>2</superscript> (default: 150) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ximin</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound of the grid in <xi/> (default: 0.001) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ximax</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound of the grid in <xi/> (default: 100000) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intdeg</parametername>
</parameternamelist>
<parameterdescription>
<para>the interpolation degree on the grid in <xi/> (default: 3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the parameter in the function ln(ln(<xi/>/<Lambda/><superscript>2</superscript>)) used for the tabulation (default: 0.0005) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="248" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="248" declcolumn="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SIA structure function object initializers</header>
      <description><para>Collection of functions that initialise <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref> structure for the different kinds of structure functions available. <simplesect kind="note"><para>For now only Zero-Mass structure functions up to O(<alpha/><subscript>s</subscript>) are implemented. </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="namespaceapfel_1a1f790d661b4e302eaa42784fbf147e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeF2NCObjectsZMT</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeF2NCObjectsZMT</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeF2NCObjectsZMT precomputes the perturbative coefficients of coefficient functions for NC F2 for SIA in the ZM scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="277" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="277" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ac7feefb5721f2bd2332b52472457107c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeFLNCObjectsZMT</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeFLNCObjectsZMT</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeFLNCObjectsZMT precomputes the perturbative coefficients of coefficient functions for NC FL for SIA in the ZM scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="291" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="291" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a0f8ea454aa738b08d2a3489e46059b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const  &amp;, std::vector&lt; double &gt; const  &amp;)&gt;</type>
        <definition>std::function&lt;StructureFunctionObjects(double const&amp;, std::vector&lt;double&gt; const&amp;)&gt; apfel::InitializeF3NCObjectsZMT</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeF3NCObjectsZMT</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>The InitializeF3NCObjectsZMT precomputes the perturbative coefficients of coefficient functions for NC xF3 for SIA in the ZM scheme and store them in the &apos;<ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-5</superscript>}) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StructureFunctionObjects-valued function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="305" column="17" declfile="inc/apfel/structurefunctionbuilder.h" declline="305" declcolumn="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Structure function builders</header>
      <description><para>Collection of functions that build a map of <ref refid="classapfel_1_1Observable" kindref="compound">Observable</ref> objects corresponding to the different component of the structure functions. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1ae22702976343188c62e6f4091327e4b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="classapfel_1_1Observable" kindref="compound">Observable</ref>&lt;&gt; &gt;</type>
        <definition>std::map&lt;int, Observable&lt;&gt; &gt; apfel::BuildStructureFunctions</definition>
        <argsstring>(std::function&lt; StructureFunctionObjects(double const &amp;, std::vector&lt; double &gt; const &amp;)&gt; const &amp;FObj, std::function&lt; std::map&lt; int, double &gt;(double const &amp;, double const &amp;)&gt; const &amp;InDistFunc, int const &amp;PerturbativeOrder, std::function&lt; double(double const &amp;)&gt; const &amp;Alphas, std::function&lt; std::vector&lt; double &gt;(double const &amp;)&gt; const &amp;Couplings)</argsstring>
        <name>BuildStructureFunctions</name>
        <param>
          <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const &amp;, std::vector&lt; double &gt; const &amp;)&gt; const &amp;</type>
          <declname>FObj</declname>
        </param>
        <param>
          <type>std::function&lt; std::map&lt; int, double &gt;(double const &amp;, double const &amp;)&gt; const &amp;</type>
          <declname>InDistFunc</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>Alphas</declname>
        </param>
        <param>
          <type>std::function&lt; std::vector&lt; double &gt;(double const &amp;)&gt; const &amp;</type>
          <declname>Couplings</declname>
        </param>
        <briefdescription>
<para>The BuildStructureFunctions function constructs a map of &quot;Observable&quot; objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>FObj</parametername>
</parameternamelist>
<parameterdescription>
<para>the StructureFunctionObjects-valued for the structure function objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDistFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>the distribution to be convoluted with as a map&lt;int,double&gt;-valued function of x and Q </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alphas</parametername>
</parameternamelist>
<parameterdescription>
<para>the strong coupling function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Couplings</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector-valued function of (non-QCD) couplings </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of &quot;Observable&quot; objects, one for number of active flavours </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="327" column="12" declfile="inc/apfel/structurefunctionbuilder.h" declline="327" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1acedbfdfb70af4a407196fdbde401b1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="classapfel_1_1Observable" kindref="compound">Observable</ref>&lt;&gt; &gt;</type>
        <definition>std::map&lt;int, Observable&lt;&gt; &gt; apfel::BuildStructureFunctions</definition>
        <argsstring>(std::function&lt; StructureFunctionObjects(double const &amp;, std::vector&lt; double &gt; const &amp;)&gt; const &amp;FObj, std::function&lt; double(int const &amp;, double const &amp;, double const &amp;)&gt; const &amp;InDistFunc, int const &amp;PerturbativeOrder, std::function&lt; double(double const &amp;)&gt; const &amp;Alphas, std::function&lt; std::vector&lt; double &gt;(double const &amp;)&gt; const &amp;Couplings)</argsstring>
        <name>BuildStructureFunctions</name>
        <param>
          <type>std::function&lt; <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref>(double const &amp;, std::vector&lt; double &gt; const &amp;)&gt; const &amp;</type>
          <declname>FObj</declname>
        </param>
        <param>
          <type>std::function&lt; double(int const &amp;, double const &amp;, double const &amp;)&gt; const &amp;</type>
          <declname>InDistFunc</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>Alphas</declname>
        </param>
        <param>
          <type>std::function&lt; std::vector&lt; double &gt;(double const &amp;)&gt; const &amp;</type>
          <declname>Couplings</declname>
        </param>
        <briefdescription>
<para>The BuildStructureFunctions function constructs a map of &quot;Observable&quot; objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>FObj</parametername>
</parameternamelist>
<parameterdescription>
<para>the StructureFunctionObjects-valued for the structure function objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDistFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>the distribution to be convoluted with as a double-valued function of i, x, and Q </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alphas</parametername>
</parameternamelist>
<parameterdescription>
<para>the strong coupling function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Couplings</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector-valued function of (non-QCD) couplings </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of &quot;Observable&quot; objects, one for number of active flavours </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="343" column="12" declfile="inc/apfel/structurefunctionbuilder.h" declline="343" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a4c9df05ce2e5d1d735ea049ee6a9b86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution apfel::BuildStructureFunctions</definition>
        <argsstring>(StructureFunctionObjects const &amp;FObjQ, std::map&lt; int, Distribution &gt; const &amp;InDistFuncQ, int const &amp;PerturbativeOrder, double const &amp;AlphasQ, int const &amp;k)</argsstring>
        <name>BuildStructureFunctions</name>
        <param>
          <type><ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref> const &amp;</type>
          <declname>FObjQ</declname>
        </param>
        <param>
          <type>std::map&lt; int, <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt; const &amp;</type>
          <declname>InDistFuncQ</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>AlphasQ</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>The BuildStructureFunctions function constructs an &quot;Observable&quot; object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>FObjQ</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref> at the scale Q </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDistFuncQ</parametername>
</parameternamelist>
<parameterdescription>
<para>the distribution to be convoluted with at the scale Q as a map&lt;int,Distribution&gt; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AlphasQ</parametername>
</parameternamelist>
<parameterdescription>
<para>the strong coupling at the scale Q </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>the observable index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A &quot;Distribution&quot; object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="360" column="16" declfile="inc/apfel/structurefunctionbuilder.h" declline="360" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aa924d94953e43a0f48368142e116dc1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt;</type>
        <definition>std::map&lt;int, Distribution&gt; apfel::BuildStructureFunctions</definition>
        <argsstring>(StructureFunctionObjects const &amp;FObjQ, std::map&lt; int, Distribution &gt; const &amp;InDistFuncQ, int const &amp;PerturbativeOrder, double const &amp;AlphasQ)</argsstring>
        <name>BuildStructureFunctions</name>
        <param>
          <type><ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref> const &amp;</type>
          <declname>FObjQ</declname>
        </param>
        <param>
          <type>std::map&lt; int, <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt; const &amp;</type>
          <declname>InDistFuncQ</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>AlphasQ</declname>
        </param>
        <briefdescription>
<para>The BuildStructureFunctions function constructs a map of &quot;Observable&quot; objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>FObjQ</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structapfel_1_1StructureFunctionObjects" kindref="compound">StructureFunctionObjects</ref> at the scale Q </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDistFuncQ</parametername>
</parameternamelist>
<parameterdescription>
<para>the distribution to be convoluted with at the scale Q as a map&lt;int, Distribution&gt; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AlphasQ</parametername>
</parameternamelist>
<parameterdescription>
<para>the strong coupling at the scale Q </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map of &quot;Distribution&quot; objects, one for number of active flavours </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/structurefunctionbuilder.h" line="375" column="12" declfile="inc/apfel/structurefunctionbuilder.h" declline="375" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>TMD object initializers</header>
      <description><para>Collection of functions that initialise <ref refid="structapfel_1_1TmdObjects" kindref="compound">TmdObjects</ref> structure for the perturbartive evolution and matching currently available. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1af80acd1be427af3562f7fbc9144191c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="structapfel_1_1TmdObjects" kindref="compound">TmdObjects</ref> &gt;</type>
        <definition>std::map&lt;int, TmdObjects&gt; apfel::InitializeTmdObjects</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5, bool const &amp;nnnlo=true)</argsstring>
        <name>InitializeTmdObjects</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>nnnlo</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>The InitializeTmdObjects function precomputes the perturbative coefficients required for the evolution and matching of TMD PDFs and FFs and store them into a &apos;<ref refid="structapfel_1_1TmdObjects" kindref="compound">TmdObjects</ref>&apos; structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the x-space grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the heavy quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10^{-5}) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nnnlo</parametername>
</parameternamelist>
<parameterdescription>
<para>switch to compute the NNNLO matching functions (default: true) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map DglapObject objects, one for each possible nf </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tmdbuilder.h" line="58" column="12" declfile="inc/apfel/tmdbuilder.h" declline="58" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a12b3240e347e6184717a0fa752a19a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="structapfel_1_1TmdObjects" kindref="compound">TmdObjects</ref> &gt;</type>
        <definition>std::map&lt;int, TmdObjects&gt; apfel::InitializeTmdObjectsLite</definition>
        <argsstring>(Grid const &amp;g, std::vector&lt; double &gt; const &amp;Thresholds, double const &amp;IntEps=1e-5)</argsstring>
        <name>InitializeTmdObjectsLite</name>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>As the InitializeTmdObjects but with the computation of the NNNLO corrections to the matching conditions set to zero. This saves much computation time usually unneded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tmdbuilder.h" line="68" column="12" declfile="inc/apfel/tmdbuilder.h" declline="68" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>TMD builders</header>
      <description><para>Collection of functions that build a TMD distributions (both PDFs and FF) as Set&lt;Distribution&gt;-valued functions. These functions perform evolution and matching either separately or alltogether. Also a function for the computation of the hard factors is provided. </para>
</description>
      <memberdef kind="function" id="namespaceapfel_1a04a2214395f5d5001f747b8f3ee9d897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt;double const  &amp;, double const  &amp;, double const  &amp;)&gt;</type>
        <definition>std::function&lt;Set&lt;Distribution&gt;double const&amp;, double const&amp;, double const&amp;)&gt; apfel::BuildTmdPDFs</definition>
        <argsstring>(std::map&lt; int, TmdObjects &gt; const &amp;TmdObj, std::function&lt; Set&lt; Distribution &gt;(double const &amp;)&gt; const &amp;CollPDFs, std::function&lt; double(double const &amp;)&gt; const &amp;Alphas, int const &amp;PerturbativeOrder, double const &amp;Ci=1, double const &amp;IntEps=1e-7)</argsstring>
        <name>BuildTmdPDFs</name>
        <param>
          <type>std::map&lt; int, <ref refid="structapfel_1_1TmdObjects" kindref="compound">TmdObjects</ref> &gt; const &amp;</type>
          <declname>TmdObj</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt;(double const &amp;)&gt; const &amp;</type>
          <declname>CollPDFs</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>Alphas</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>Ci</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-7</defval>
        </param>
        <briefdescription>
<para>Function that returns the matched and evolved TMD PDFs in b-space as functions of the final scale and rapidity. It assumes the zeta-prescription. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TmdObj</parametername>
</parameternamelist>
<parameterdescription>
<para>the TMD objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CollPDFs</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of collinear PDFs to be matched </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alphas</parametername>
</parameternamelist>
<parameterdescription>
<para>the strong coupling function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ci</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial-scale variation factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-7</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set&lt;Distribution&gt;-valued function of the impact parameter b<subscript>T</subscript>, the final renormalisation scale <mu/>, and the final rapidity scale <zeta/> representing the evolved TMD PDFs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tmdbuilder.h" line="96" column="19" declfile="inc/apfel/tmdbuilder.h" declline="96" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a195e9f97f0d61dfa5ac32da21c104ffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt;double const  &amp;, double const  &amp;, double const  &amp;)&gt;</type>
        <definition>std::function&lt;Set&lt;Distribution&gt;double const&amp;, double const&amp;, double const&amp;)&gt; apfel::BuildTmdFFs</definition>
        <argsstring>(std::map&lt; int, TmdObjects &gt; const &amp;TmdObj, std::function&lt; Set&lt; Distribution &gt;(double const &amp;)&gt; const &amp;CollFFs, std::function&lt; double(double const &amp;)&gt; const &amp;Alphas, int const &amp;PerturbativeOrder, double const &amp;Ci=1, double const &amp;IntEps=1e-7)</argsstring>
        <name>BuildTmdFFs</name>
        <param>
          <type>std::map&lt; int, <ref refid="structapfel_1_1TmdObjects" kindref="compound">TmdObjects</ref> &gt; const &amp;</type>
          <declname>TmdObj</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt;(double const &amp;)&gt; const &amp;</type>
          <declname>CollFFs</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>Alphas</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>Ci</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-7</defval>
        </param>
        <briefdescription>
<para>Function that returns the matched and evolved TMD FFs in b-space as functions of the final scale and rapidity. It assumes the zeta-prescription. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TmdObj</parametername>
</parameternamelist>
<parameterdescription>
<para>the TMD objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CollFFs</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of collinear PDFs to be matched </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alphas</parametername>
</parameternamelist>
<parameterdescription>
<para>the strong coupling function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ci</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial-scale variation factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-7</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set&lt;Distribution&gt;-valued function of the impact parameter b<subscript>T</subscript>, the final renormalisation scale <mu/>, and the final rapidity scale <zeta/> representing the evolved TMD FFs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tmdbuilder.h" line="117" column="19" declfile="inc/apfel/tmdbuilder.h" declline="117" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a63b0f529e5b4b400c2d7906acc82bf58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt;double const  &amp;)&gt;</type>
        <definition>std::function&lt;Set&lt;Distribution&gt;double const&amp;)&gt; apfel::MatchTmdPDFs</definition>
        <argsstring>(std::map&lt; int, TmdObjects &gt; const &amp;TmdObj, std::function&lt; Set&lt; Distribution &gt;(double const &amp;)&gt; const &amp;CollPDFs, std::function&lt; double(double const &amp;)&gt; const &amp;Alphas, int const &amp;PerturbativeOrder, double const &amp;Ci=1)</argsstring>
        <name>MatchTmdPDFs</name>
        <param>
          <type>std::map&lt; int, <ref refid="structapfel_1_1TmdObjects" kindref="compound">TmdObjects</ref> &gt; const &amp;</type>
          <declname>TmdObj</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt;(double const &amp;)&gt; const &amp;</type>
          <declname>CollPDFs</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>Alphas</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>Ci</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Function that returns the matched TMD PDFs in b-space. It assumes the zeta-prescription. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TmdObj</parametername>
</parameternamelist>
<parameterdescription>
<para>the TMD objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CollPDFs</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of collinear PDFs to be matched </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alphas</parametername>
</parameternamelist>
<parameterdescription>
<para>the strong coupling function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ci</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial-scale variation factor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set&lt;Distribution&gt;-valued function of the impact parameter b<subscript>T</subscript> representing the matched TMD PDFs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tmdbuilder.h" line="135" column="19" declfile="inc/apfel/tmdbuilder.h" declline="135" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aff384553d8392f5819f06bf369b71033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt;double const  &amp;)&gt;</type>
        <definition>std::function&lt;Set&lt;Distribution&gt;double const&amp;)&gt; apfel::MatchTmdFFs</definition>
        <argsstring>(std::map&lt; int, TmdObjects &gt; const &amp;TmdObj, std::function&lt; Set&lt; Distribution &gt;(double const &amp;)&gt; const &amp;CollPDFs, std::function&lt; double(double const &amp;)&gt; const &amp;Alphas, int const &amp;PerturbativeOrder, double const &amp;Ci=1)</argsstring>
        <name>MatchTmdFFs</name>
        <param>
          <type>std::map&lt; int, <ref refid="structapfel_1_1TmdObjects" kindref="compound">TmdObjects</ref> &gt; const &amp;</type>
          <declname>TmdObj</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classapfel_1_1Set" kindref="compound">Set</ref>&lt; <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref> &gt;(double const &amp;)&gt; const &amp;</type>
          <declname>CollPDFs</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>Alphas</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>Ci</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Function that returns the matched TMD FFs in b-space. It assumes the zeta-prescription. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TmdObj</parametername>
</parameternamelist>
<parameterdescription>
<para>the TMD objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CollPDFs</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of collinear PDFs to be matched </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alphas</parametername>
</parameternamelist>
<parameterdescription>
<para>the strong coupling function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ci</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial-scale variation factor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set&lt;Distribution&gt;-valued function of the impact parameter b<subscript>T</subscript> representing the matched TMD FFs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tmdbuilder.h" line="152" column="19" declfile="inc/apfel/tmdbuilder.h" declline="152" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a5a6b07969c354af2015c2dc9b3766c35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; std::vector&lt; double &gt;double const  &amp;, double const  &amp;, double const  &amp;)&gt;</type>
        <definition>std::function&lt;std::vector&lt;double&gt;double const&amp;, double const&amp;, double const&amp;)&gt; apfel::EvolutionFactors</definition>
        <argsstring>(std::map&lt; int, TmdObjects &gt; const &amp;TmdObj, std::function&lt; double(double const &amp;)&gt; const &amp;Alphas, int const &amp;PerturbativeOrder, double const &amp;Ci=1, double const &amp;IntEps=1e-7)</argsstring>
        <name>EvolutionFactors</name>
        <param>
          <type>std::map&lt; int, <ref refid="structapfel_1_1TmdObjects" kindref="compound">TmdObjects</ref> &gt; const &amp;</type>
          <declname>TmdObj</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>Alphas</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>Ci</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-7</defval>
        </param>
        <briefdescription>
<para>Function that returns the evolution factors for gluon and quarks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TmdObj</parametername>
</parameternamelist>
<parameterdescription>
<para>the TMD objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alphas</parametername>
</parameternamelist>
<parameterdescription>
<para>the strong coupling function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ci</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial scale-variation factor (default: 1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-7</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;double&gt;-valued function of the impact parameter b<subscript>T</subscript>, the final renormalisation scale <mu/>, and the final rapidity scale <zeta/>. The 0-th component contains the gluon evolution factor, the remaining 12, from 1 to 12, are all equal and represent the quark evolution factors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tmdbuilder.h" line="171" column="19" declfile="inc/apfel/tmdbuilder.h" declline="171" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ae15bd917c13625f7510f0da9ad232d50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; double(double const  &amp;, double const  &amp;, double const  &amp;)&gt;</type>
        <definition>std::function&lt;double(double const&amp;, double const&amp;, double const&amp;)&gt; apfel::QuarkEvolutionFactor</definition>
        <argsstring>(std::map&lt; int, TmdObjects &gt; const &amp;TmdObj, std::function&lt; double(double const &amp;)&gt; const &amp;Alphas, int const &amp;PerturbativeOrder, double const &amp;Ci=1, double const &amp;IntEps=1e-7)</argsstring>
        <name>QuarkEvolutionFactor</name>
        <param>
          <type>std::map&lt; int, <ref refid="structapfel_1_1TmdObjects" kindref="compound">TmdObjects</ref> &gt; const &amp;</type>
          <declname>TmdObj</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>Alphas</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>Ci</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-7</defval>
        </param>
        <briefdescription>
<para>Function that returns the evolution factor for quarks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TmdObj</parametername>
</parameternamelist>
<parameterdescription>
<para>the TMD objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alphas</parametername>
</parameternamelist>
<parameterdescription>
<para>the strong coupling function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ci</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial scale-variation factor (default: 1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-7</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double-valued function of the impact parameter b<subscript>T</subscript>, the final renormalisation scale <mu/>, and the final rapidity scale <zeta/>. It returns the quark evolution factor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tmdbuilder.h" line="189" column="17" declfile="inc/apfel/tmdbuilder.h" declline="189" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ac70bcb95392db2f7350f089a2f1777b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; double(double const  &amp;, double const  &amp;, double const  &amp;)&gt;</type>
        <definition>std::function&lt;double(double const&amp;, double const&amp;, double const&amp;)&gt; apfel::GluonEvolutionFactor</definition>
        <argsstring>(std::map&lt; int, TmdObjects &gt; const &amp;TmdObj, std::function&lt; double(double const &amp;)&gt; const &amp;Alphas, int const &amp;PerturbativeOrder, double const &amp;Ci=1, double const &amp;IntEps=1e-7)</argsstring>
        <name>GluonEvolutionFactor</name>
        <param>
          <type>std::map&lt; int, <ref refid="structapfel_1_1TmdObjects" kindref="compound">TmdObjects</ref> &gt; const &amp;</type>
          <declname>TmdObj</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>Alphas</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>Ci</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>IntEps</declname>
          <defval>1e-7</defval>
        </param>
        <briefdescription>
<para>Function that returns the evolution factor for the gluon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TmdObj</parametername>
</parameternamelist>
<parameterdescription>
<para>the TMD objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alphas</parametername>
</parameternamelist>
<parameterdescription>
<para>the strong coupling function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ci</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial scale-variation factor (default: 1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntEps</parametername>
</parameternamelist>
<parameterdescription>
<para>the integration accuracy (default: 10<superscript>-7</superscript>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double-valued function of the impact parameter b<subscript>T</subscript>, the final renormalisation scale <mu/>, and the final rapidity scale <zeta/>. It returns the gluon evolution factor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tmdbuilder.h" line="207" column="17" declfile="inc/apfel/tmdbuilder.h" declline="207" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aed9d19998f4be65505846a0f89619187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; double(double const  &amp;)&gt;</type>
        <definition>std::function&lt;double(double const&amp;)&gt; apfel::HardFactor</definition>
        <argsstring>(std::string const &amp;Process, std::map&lt; int, TmdObjects &gt; const &amp;TmdObj, std::function&lt; double(double const &amp;)&gt; const &amp;Alphas, int const &amp;PerturbativeOrder, double const &amp;Cf=1)</argsstring>
        <name>HardFactor</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>Process</declname>
        </param>
        <param>
          <type>std::map&lt; int, <ref refid="structapfel_1_1TmdObjects" kindref="compound">TmdObjects</ref> &gt; const &amp;</type>
          <declname>TmdObj</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>Alphas</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>Cf</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Function that returns the hard factor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Process</parametername>
</parameternamelist>
<parameterdescription>
<para>the string corresponding to the process requested </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TmdObj</parametername>
</parameternamelist>
<parameterdescription>
<para>the TMD objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alphas</parametername>
</parameternamelist>
<parameterdescription>
<para>the strong coupling function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the perturbative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cf</parametername>
</parameternamelist>
<parameterdescription>
<para>the final scale-variation factor (default: 1) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double-valued function of the final renormalisation scale <mu/> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tmdbuilder.h" line="222" column="17" declfile="inc/apfel/tmdbuilder.h" declline="222" declcolumn="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Tools</header>
      <description><para>Collection of useful tools. </para>
</description>
      <memberdef kind="enum" id="namespaceapfel_1a52f9641b9ca0b856fffcd7fdb42f575b" prot="public" static="no" strong="no">
        <type>int</type>
        <name>QuarkFlavour</name>
        <enumvalue id="namespaceapfel_1a52f9641b9ca0b856fffcd7fdb42f575ba1dc03810f0ca2619dbde6fff93fe523d" prot="public">
          <name>TOTAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceapfel_1a52f9641b9ca0b856fffcd7fdb42f575ba4fc87957ec48d06ed3f39ac19360cdea" prot="public">
          <name>DOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceapfel_1a52f9641b9ca0b856fffcd7fdb42f575baba2bafcb4972bbfb147a55b003bbb319" prot="public">
          <name>UP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceapfel_1a52f9641b9ca0b856fffcd7fdb42f575bafdd12402e91aa116e977472d449f3eff" prot="public">
          <name>STRANGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceapfel_1a52f9641b9ca0b856fffcd7fdb42f575ba6bf010add75b0e55719c2dc8bfeb1345" prot="public">
          <name>CHARM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceapfel_1a52f9641b9ca0b856fffcd7fdb42f575ba69781433f7bd24bafcb395b4f247505a" prot="public">
          <name>BOTTOM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceapfel_1a52f9641b9ca0b856fffcd7fdb42f575ba7e4803e86b2881f137cf3968c619505f" prot="public">
          <name>TOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quark enumerator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tools.h" line="20" column="3" bodyfile="inc/apfel/tools.h" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a5ae0b26dd9a59ac71e0c8820ada8c433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apfel::NF</definition>
        <argsstring>(double const &amp;Q, std::vector&lt; double &gt; const &amp;Thresholds)</argsstring>
        <name>NF</name>
        <param>
          <type>double const &amp;</type>
          <declname>Q</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <briefdescription>
<para>Return the number of active flavours at the scale Q given the (ordered) vector of thresholds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>the scale </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of thresholds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of active flavours at Q </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tools.h" line="29" column="7" declfile="inc/apfel/tools.h" declline="29" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a60e7f076062aec09d1944e468f292571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::DeltaFun</definition>
        <argsstring>(double const &amp;a, double const &amp;b, double const &amp;c)</argsstring>
        <name>DeltaFun</name>
        <param>
          <type>double const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Utility function used by the heavy-quark initiated massive coefficient functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>first parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>second parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>third parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Triangular function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tools.h" line="39" column="10" declfile="inc/apfel/tools.h" declline="39" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a8bd3d59827ddd11636064f2e7e4f1172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; apfel::ElectroWeakCharges</definition>
        <argsstring>(double const &amp;Q, bool const &amp;virt, int const &amp;Comp=TOTAL)</argsstring>
        <name>ElectroWeakCharges</name>
        <param>
          <type>double const &amp;</type>
          <declname>Q</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>virt</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>Comp</declname>
          <defval><ref refid="namespaceapfel_1a52f9641b9ca0b856fffcd7fdb42f575ba1dc03810f0ca2619dbde6fff93fe523d" kindref="member">TOTAL</ref></defval>
        </param>
        <briefdescription>
<para>Utility function for the computation of the electroweak charges, for both time-like and space-like virtualities (Reference: <ulink url="https://arxiv.org/pdf/hep-ph/9711387.pdf">https://arxiv.org/pdf/hep-ph/9711387.pdf</ulink>). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>absolute value the virtuality of the vector boson </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virt</parametername>
</parameternamelist>
<parameterdescription>
<para>virtuality (true: time-like, false: space-like) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the flavour selector (default: TOTAL, i.e. all flavours are computed) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the std::vector of the electroweak charges </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tools.h" line="50" column="15" declfile="inc/apfel/tools.h" declline="50" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a3092c2f6ab9d47c5ffe964f2e124c2e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; apfel::ElectroWeakChargesNWA</definition>
        <argsstring>()</argsstring>
        <name>ElectroWeakChargesNWA</name>
        <briefdescription>
<para>Utility function for the computation of the electroweak charges for Drell-Yan in narrow-width appriximation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the std::vector of the electroweak charges </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tools.h" line="57" column="15" declfile="inc/apfel/tools.h" declline="57" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1aee89f2fd03ee7b3c45e39162322a2850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; apfel::ConcatenateAndSortVectors</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;v1, std::vector&lt; double &gt; const &amp;v2)</argsstring>
        <name>ConcatenateAndSortVectors</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Utility function that concatenates and sort the input vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>first vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>second vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a std::vector containing the sorted entries of &apos;v1&apos; and &apos;v2&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tools.h" line="66" column="15" declfile="inc/apfel/tools.h" declline="66" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a36d6703cec0e54d3abeed1f96adb0c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double apfel::dabs</definition>
        <argsstring>(T const &amp;d)</argsstring>
        <name>dabs</name>
        <param>
          <type>T const &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Absolute value of the object T. In the case of a <ref refid="classapfel_1_1Distribution" kindref="compound">Distribution</ref>, this is computed like the squared mean average of the entries of the joint grid. In the case of a set of distributions, the minimum dabs over the distributions is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>input object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the absolute value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tools.h" line="78" column="10" declfile="inc/apfel/tools.h" declline="78" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a6de7bb0661f079c85b439a896151dc6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; apfel::ProductExpansion</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;r)</argsstring>
        <name>ProductExpansion</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Function that computes the coefficients of the expansion of a product of n binomials with zero&apos;s in r. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>input vector of zero&apos;s </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tools.h" line="85" column="15" declfile="inc/apfel/tools.h" declline="85" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a0fe368880404ba6484e6af19d23695ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apfel::factorial</definition>
        <argsstring>(int const &amp;n)</argsstring>
        <name>factorial</name>
        <param>
          <type>int const &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Factorial of an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>input integer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tools.h" line="91" column="7" declfile="inc/apfel/tools.h" declline="91" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a19f6f1aae3aaf0db2bf9a1301ac52033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::GetSIATotalCrossSection</definition>
        <argsstring>(int const &amp;PerturbativeOrder, double const &amp;Q, double const &amp;AlphaQCD, double const &amp;AlphaQED, std::vector&lt; double &gt; const &amp;Thresholds, QuarkFlavour const &amp;Comp=TOTAL, bool const &amp;NoCharges=false)</argsstring>
        <name>GetSIATotalCrossSection</name>
        <param>
          <type>int const &amp;</type>
          <declname>PerturbativeOrder</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>Q</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>AlphaQCD</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>AlphaQED</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>Thresholds</declname>
        </param>
        <param>
          <type><ref refid="namespaceapfel_1a52f9641b9ca0b856fffcd7fdb42f575b" kindref="member">QuarkFlavour</ref> const &amp;</type>
          <declname>Comp</declname>
          <defval><ref refid="namespaceapfel_1a52f9641b9ca0b856fffcd7fdb42f575ba1dc03810f0ca2619dbde6fff93fe523d" kindref="member">TOTAL</ref></defval>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>NoCharges</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Function that computes the total cross section in a electron-positron annihilation process. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PerturbativeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>perturbative order of the computation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>vector-boson invariant mass </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classapfel_1_1AlphaQCD" kindref="compound">AlphaQCD</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>value of the strong coupling at Q </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classapfel_1_1AlphaQED" kindref="compound">AlphaQED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>value of the electromagnetic coupling at Q </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Thresholds</parametername>
</parameternamelist>
<parameterdescription>
<para>heavy-quark thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Comp</parametername>
</parameternamelist>
<parameterdescription>
<para>component of the cross section, e.g. charm, bottom, etc. (default = TOTAL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NoCharges</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to exclude the sum over the charge of the active flavours (default = false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the total cross section (in nbarn) </para>
</simplesect>
<simplesect kind="note"><para>The QCD corrections to the total cross section in a electron-positron annihilation process are taken from Phys.Lett. B259 (1991) 144–150. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tools.h" line="108" column="10" declfile="inc/apfel/tools.h" declline="108" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceapfel_1a8c509ac51bd27e1f97b8e5cb520df446" prot="public" static="no" strong="no">
        <type>int</type>
        <name>LogAccuracy</name>
        <enumvalue id="namespaceapfel_1a8c509ac51bd27e1f97b8e5cb520df446a81f679d71cd354cff5ab9304c9ddf9cb" prot="public">
          <name>NNNLLp</name>
          <initializer>= -3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceapfel_1a8c509ac51bd27e1f97b8e5cb520df446adfc29ff39675e3cece6122543a35a06f" prot="public">
          <name>NNLLp</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceapfel_1a8c509ac51bd27e1f97b8e5cb520df446a0e7d1540bc320138a315f0782f9b855e" prot="public">
          <name>NLLp</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceapfel_1a8c509ac51bd27e1f97b8e5cb520df446ad653300441796ddfb2fd7d2bcfef1118" prot="public">
          <name>LL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceapfel_1a8c509ac51bd27e1f97b8e5cb520df446a34582b355410694f2355d80af25b1288" prot="public">
          <name>NLL</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceapfel_1a8c509ac51bd27e1f97b8e5cb520df446a8cb9e49b56b78490614921ffb7bd2672" prot="public">
          <name>NNLL</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceapfel_1a8c509ac51bd27e1f97b8e5cb520df446a949a7f277ba11f30498415ab0951e8cc" prot="public">
          <name>NNNLL</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumerator for the logarithmic accuracy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/tmdbuilder.h" line="20" column="3" bodyfile="inc/apfel/tmdbuilder.h" bodystart="20" bodyend="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceapfel_1ad6198ef2377e81a2fd6a5cbe081bffbf" prot="public" static="no" mutable="no">
        <type>const std::map&lt; std::pair&lt; int, int &gt;, int &gt;</type>
        <definition>const std::map&lt;std::pair&lt;int, int&gt;, int&gt; apfel::Gkj</definition>
        <argsstring></argsstring>
        <name>Gkj</name>
        <initializer>=
    {
      {{ 0,0}, 0}, {{ 0,1}, 1},           {{ 0,3}, 2},           {{ 0,5}, 3},           {{ 0,7}, 4},           {{ 0,9}, 5},             {{ 0,11}, 6},
      {{ 1,0}, 7}, {{ 1,1}, 8},           {{ 1,3}, 9},           {{ 1,5},10},           {{ 1,7},11},           {{ 1,9},12},             {{ 1,11},13},
                               {{2,2},14},
      {{ 3,0},15}, {{ 3,1},16},           {{ 3,3},17},           {{ 3,5},18},           {{ 3,7},19},           {{ 3,9},20},             {{ 3,11},21},
                                                      {{4,4},22},
      {{ 5,0},23}, {{ 5,1},24},           {{ 5,3},25},           {{ 5,5},26},           {{ 5,7},27},           {{ 5,9},28},             {{ 5,11},29},
                                                                             {{6,6},30},
      {{ 7,0},31}, {{ 7,1},32},           {{ 7,3},33},           {{ 7,5},34},           {{ 7,7},35},           {{ 7,9},36},             {{ 7,11},37},
                                                                                                    {{8,8},38},
      {{ 9,0},39}, {{ 9,1},40},           {{ 9,3},41},           {{ 9,5},42},           {{ 9,7},43},           {{ 9,9},44},             {{ 9,11},45},
                                                                                                                           {{10,10},46},
      {{11,0},47}, {{11,1},48},           {{11,3},49},           {{11,5},50},           {{11,7},51},           {{11,9},52},             {{11,11},53},
                                                                                                                                                     {{12,12},54}
    }</initializer>
        <briefdescription>
<para>The map between pair of indices corresponding to the position of the operator in the evolution matrix and its linear index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/evolutionbasisqcd.h" line="19" column="18" bodyfile="inc/apfel/evolutionbasisqcd.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceapfel_1aad760dd7b28bd075301f12e8c0908d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; apfel::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, ConvolutionMap const &amp;cm)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1ConvolutionMap" kindref="compound">ConvolutionMap</ref> const &amp;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
<para>Method which prints <ref refid="classapfel_1_1ConvolutionMap" kindref="compound">ConvolutionMap</ref> with cout &lt;&lt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/convolutionmap.h" line="86" column="3" declfile="inc/apfel/convolutionmap.h" declline="86" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1af5c8d51c790c9acc2a34ce8ee6a38b21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; apfel::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, DoubleObject&lt; T, U &gt; const &amp;dob)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; const &amp;</type>
          <declname>dob</declname>
        </param>
        <briefdescription>
<para>Method which prints the double object with cout &lt;&lt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="201" column="3" declfile="inc/apfel/doubleobject.h" declline="201" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1abc23ca5eae2ff193a815b82a1a3777f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; apfel::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, Grid const &amp;gr)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Grid" kindref="compound">Grid</ref> const &amp;</type>
          <declname>gr</declname>
        </param>
        <briefdescription>
<para>Overload the &lt;&lt; operator to print the parameters of the grid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/grid.h" line="95" column="3" declfile="inc/apfel/grid.h" declline="95" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a52b394247fa88646587804bc567db5e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; apfel::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, Interpolator const &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Interpolator" kindref="compound">Interpolator</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Method which prints <ref refid="classapfel_1_1Interpolator" kindref="compound">Interpolator</ref> with cout &lt;&lt;. This only prints the first subgrid and is supposed to be used for debugging purposes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/interpolator.h" line="152" column="3" declfile="inc/apfel/interpolator.h" declline="152" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a7d16267aa20a28acf4eac8962bfc9838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; apfel::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, Operator const &amp;op)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref> const &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Method which prints <ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref> with cout &lt;&lt;. This only prints the <ref refid="classapfel_1_1Operator" kindref="compound">Operator</ref> on the first subgrid and is supposed to be used for debugging purposes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/operator.h" line="102" column="3" declfile="inc/apfel/operator.h" declline="102" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1ad17e52cbe3d5c7dcd1e51b6bb5532e13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; apfel::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, QGrid&lt; T &gt; const &amp;Qg)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1QGrid" kindref="compound">QGrid</ref>&lt; T &gt; const &amp;</type>
          <declname>Qg</declname>
        </param>
        <briefdescription>
<para>Method that prints <ref refid="classapfel_1_1QGrid" kindref="compound">QGrid</ref> with cout &lt;&lt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/qgrid.h" line="182" column="10" bodyfile="inc/apfel/qgrid.h" bodystart="182" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapfel_1a53e7dc45312417de294b6dfdf530cc84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; apfel::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, SubGrid const &amp;sg)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1SubGrid" kindref="compound">SubGrid</ref> const &amp;</type>
          <declname>sg</declname>
        </param>
        <briefdescription>
<para>Method which prints <ref refid="classapfel_1_1SubGrid" kindref="compound">SubGrid</ref> with cout &lt;&lt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/subgrid.h" line="72" column="3" declfile="inc/apfel/subgrid.h" declline="72" declcolumn="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Namespace for all APFEL++ functions and classes. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="inc/apfel/alphaqcd.h" line="13" column="1"/>
  </compounddef>
</doxygen>
