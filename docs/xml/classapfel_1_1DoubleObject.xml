<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classapfel_1_1DoubleObject" kind="class" language="C++" prot="public">
    <compoundname>apfel::DoubleObject</compoundname>
    <includes refid="doubleobject_8h" local="no">doubleobject.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class U</type>
        <defval>T</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <description><para>List of constructors. </para>
</description>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1a4c9d9da30a05a5b7f088718a23605529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::DoubleObject&lt; T, U &gt;::DoubleObject</definition>
        <argsstring>()</argsstring>
        <name>DoubleObject</name>
        <briefdescription>
<para>The <ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="46" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1a5b1b76382255f0ee40ff525bbf2fe6db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apfel::DoubleObject&lt; T, U &gt;::DoubleObject</definition>
        <argsstring>(std::vector&lt; term&lt; T, U &gt;&gt; const &amp;terms)</argsstring>
        <name>DoubleObject</name>
        <param>
          <type>std::vector&lt; <ref refid="structapfel_1_1term" kindref="compound">term</ref>&lt; T, U &gt;&gt; const &amp;</type>
          <declname>terms</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>terms</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of term objects of the T kind </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="52" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Binary operators</header>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1ab98ea4019275fa0f1d9e8f7ba5b717be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; V &gt;</type>
        <definition>DoubleObject&lt;V&gt; apfel::DoubleObject&lt; T, U &gt;::operator*=</definition>
        <argsstring>(DoubleObject&lt; V &gt; const &amp;o) const</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; V &gt; const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="152" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1ad25cd6936c6f372b3e196bb339ba111b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; &amp;</type>
        <definition>DoubleObject&lt;T, U&gt;&amp; apfel::DoubleObject&lt; T, U &gt;::operator*=</definition>
        <argsstring>(double const &amp;s)</argsstring>
        <name>operator*=</name>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>this *= scalar </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="153" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1a4cf203771751bfa6e06f3c71418b6d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; &amp;</type>
        <definition>DoubleObject&lt;T, U&gt;&amp; apfel::DoubleObject&lt; T, U &gt;::operator*=</definition>
        <argsstring>(DoubleObject&lt; T, U &gt; const &amp;o)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>this *= <ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="154" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1a61f805ff8dc6fe2a9b9cf3a75792bab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; &amp;</type>
        <definition>DoubleObject&lt;T, U&gt;&amp; apfel::DoubleObject&lt; T, U &gt;::operator*=</definition>
        <argsstring>(std::function&lt; double(double const &amp;)&gt; const &amp;f)</argsstring>
        <name>operator*=</name>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>this *= Function of the integration variable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="155" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1ac8eff1924af8d12aae30c69d5ca9f699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; &amp;</type>
        <definition>DoubleObject&lt;T, U&gt;&amp; apfel::DoubleObject&lt; T, U &gt;::operator/=</definition>
        <argsstring>(double const &amp;s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>this /= scalar </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="156" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1a4a615fe9eef8b5b910863cefded8a0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; &amp;</type>
        <definition>DoubleObject&lt;T, U&gt;&amp; apfel::DoubleObject&lt; T, U &gt;::operator+=</definition>
        <argsstring>(DoubleObject&lt; T, U &gt; const &amp;o)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>this += <ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="157" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1a4e5959b87a3d4d9bad46651252da5643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; &amp;</type>
        <definition>DoubleObject&lt;T, U&gt;&amp; apfel::DoubleObject&lt; T, U &gt;::operator-=</definition>
        <argsstring>(DoubleObject&lt; T, U &gt; const &amp;o)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>this -= <ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="158" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classapfel_1_1DoubleObject_1a296c6957fd6bfdef3a1024b54c0c04b8" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structapfel_1_1term" kindref="compound">term</ref>&lt; T, U &gt; &gt;</type>
        <definition>std::vector&lt;term&lt;T, U&gt; &gt; apfel::DoubleObject&lt; T, U &gt;::_terms</definition>
        <argsstring></argsstring>
        <name>_terms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="162" column="17" bodyfile="inc/apfel/doubleobject.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1a2ac7b068262482662cde7df4f622be1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apfel::DoubleObject&lt; T, U &gt;::AddTerm</definition>
        <argsstring>(term&lt; T, U &gt; const &amp;newterm)</argsstring>
        <name>AddTerm</name>
        <param>
          <type><ref refid="structapfel_1_1term" kindref="compound">term</ref>&lt; T, U &gt; const &amp;</type>
          <declname>newterm</declname>
        </param>
        <briefdescription>
<para>Function to add more terms. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newterm</parametername>
</parameternamelist>
<parameterdescription>
<para>new term to be appended to the vector of terms </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="59" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1a24434583404d26bea5ac39460ff9e6b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structapfel_1_1term" kindref="compound">term</ref>&lt; T, U &gt; &gt;</type>
        <definition>std::vector&lt;term&lt;T, U&gt; &gt; apfel::DoubleObject&lt; T, U &gt;::GetTerms</definition>
        <argsstring>() const</argsstring>
        <name>GetTerms</name>
        <briefdescription>
<para>Function to get the terms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The vector of terms </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="65" column="17" bodyfile="inc/apfel/doubleobject.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1aff9c2b964272553047699555b47e1e2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::DoubleObject&lt; T, U &gt;::Evaluate</definition>
        <argsstring>(double const &amp;x, double const &amp;z) const</argsstring>
        <name>Evaluate</name>
        <param>
          <type>double const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Function that evaluates the double distribution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the first variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the second variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the double distribution in (x, z) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="73" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1af7977c051d6c6d9ae4d8833831d15eec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T apfel::DoubleObject&lt; T, U &gt;::Evaluate1</definition>
        <argsstring>(double const &amp;x) const</argsstring>
        <name>Evaluate1</name>
        <param>
          <type>double const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function that evaluates the double object in the first variable leaving the second undetermined. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the first variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="80" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1a10ba72a6ef22b07339b14e86f2f4d0d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>U</type>
        <definition>U apfel::DoubleObject&lt; T, U &gt;::Evaluate2</definition>
        <argsstring>(double const &amp;z) const</argsstring>
        <name>Evaluate2</name>
        <param>
          <type>double const &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Function that evaluates the double object in the second variable leaving the first undetermined. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the second variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="87" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1a351a88c557fe07ea52c55f10a8144938" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::DoubleObject&lt; T, U &gt;::Derive</definition>
        <argsstring>(double const &amp;x, double const &amp;z) const</argsstring>
        <name>Derive</name>
        <param>
          <type>double const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Function that evaluates the derivative of the double distribution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the first variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the second variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the derivative of the double distribution in (x, z) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="97" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1ae151e6eb6e52197beadc9c9f07ef671c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T apfel::DoubleObject&lt; T, U &gt;::Derive1</definition>
        <argsstring>(double const &amp;x) const</argsstring>
        <name>Derive1</name>
        <param>
          <type>double const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function that evaluates the derivative of the double object in the first variable leaving the second undetermined. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the first variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="104" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1a5e061ccb6c56a9da00ed02ac81baa638" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>U</type>
        <definition>U apfel::DoubleObject&lt; T, U &gt;::Derive2</definition>
        <argsstring>(double const &amp;z) const</argsstring>
        <name>Derive2</name>
        <param>
          <type>double const &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Function that evaluates the derivative of the double object in the second variable leaving the first undetermined. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the second variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="111" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1a6f172200f714a48916001c9d0181437c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double apfel::DoubleObject&lt; T, U &gt;::Integrate</definition>
        <argsstring>(double const &amp;xl, double const &amp;xu, double const &amp;zl, double const &amp;zu) const</argsstring>
        <name>Integrate</name>
        <param>
          <type>double const &amp;</type>
          <declname>xl</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>xu</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>zl</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>zu</declname>
        </param>
        <briefdescription>
<para>Function that evaluates the integral of the double distribution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xl</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the lower bound of the of the first variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xu</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the upper bound of the of the first variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zl</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the lower bound of the of the second variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zu</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the upper bound of the of the second variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the integral of the double distribution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="122" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1adcf75d9c79a4d6458c5672094220b501" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T apfel::DoubleObject&lt; T, U &gt;::Integrate1</definition>
        <argsstring>(double const &amp;xl, double const &amp;xu) const</argsstring>
        <name>Integrate1</name>
        <param>
          <type>double const &amp;</type>
          <declname>xl</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>xu</declname>
        </param>
        <briefdescription>
<para>Function that evaluates the integral of the double object in the first variable leaving the second undetermined. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xl</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the lower bound of the of the first variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xu</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the upper bound of the of the first variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="130" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1a5647585eef952847e24e1c850abcf013" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>U</type>
        <definition>U apfel::DoubleObject&lt; T, U &gt;::Integrate2</definition>
        <argsstring>(double const &amp;zl, double const &amp;zu) const</argsstring>
        <name>Integrate2</name>
        <param>
          <type>double const &amp;</type>
          <declname>zl</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>zu</declname>
        </param>
        <briefdescription>
<para>Function that evaluates the derivative of the double object in the second variable leaving the first undetermined. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zl</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the lower bound of the of the second variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zu</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the upper bound of the of the second variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="138" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classapfel_1_1DoubleObject_1ac1b631d17da1e7845ccc99b318e810b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; T, U &gt; &amp;</type>
        <definition>DoubleObject&lt;T, U&gt;&amp; apfel::DoubleObject&lt; T, U &gt;::MultiplyBy</definition>
        <argsstring>(std::function&lt; double(double const &amp;)&gt; const &amp;fx, std::function&lt; double(double const &amp;)&gt; const &amp;fz)</argsstring>
        <name>MultiplyBy</name>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type>std::function&lt; double(double const &amp;)&gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <briefdescription>
<para>This function multiplies the objects of the single terms of the <ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref> by a respective function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fx</parametername>
</parameternamelist>
<parameterdescription>
<para>that function that multiplies the first distribution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fz</parametername>
</parameternamelist>
<parameterdescription>
<para>that function that multiplies the second distribution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="146" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classapfel_1_1DoubleObject_1a36846289c26aa522f5be42a698e04e36" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class W</type>
          </param>
        </templateparamlist>
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, DoubleObject&lt; V, W &gt; const &amp;dob)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref>&lt; V, W &gt; const &amp;</type>
          <declname>dob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/apfel/doubleobject.h" line="165" column="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classapfel_1_1DoubleObject" kindref="compound">DoubleObject</ref> class is a collection of pairs of single objects (Distributions or Operators) accompained by a multiplicative constant. This mother class provides the basic ingredients for the computation double convolutions required in SIDIS and DY. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>T</label>
      </node>
      <node id="2">
        <label>std::vector&lt; apfel::term&lt; T, T &gt; &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>apfel::DoubleObject&lt; T, U &gt;</label>
        <link refid="classapfel_1_1DoubleObject"/>
        <childnode refid="2" relation="usage">
          <edgelabel>_terms</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>apfel::term&lt; T, T &gt;</label>
        <link refid="structapfel_1_1term"/>
        <childnode refid="4" relation="usage">
          <edgelabel>object1</edgelabel>
          <edgelabel>object2</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="inc/apfel/doubleobject.h" line="35" column="3" bodyfile="inc/apfel/doubleobject.h" bodystart="36" bodyend="166"/>
    <listofallmembers>
      <member refid="classapfel_1_1DoubleObject_1a296c6957fd6bfdef3a1024b54c0c04b8" prot="private" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>_terms</name></member>
      <member refid="classapfel_1_1DoubleObject_1a2ac7b068262482662cde7df4f622be1c" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>AddTerm</name></member>
      <member refid="classapfel_1_1DoubleObject_1a351a88c557fe07ea52c55f10a8144938" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>Derive</name></member>
      <member refid="classapfel_1_1DoubleObject_1ae151e6eb6e52197beadc9c9f07ef671c" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>Derive1</name></member>
      <member refid="classapfel_1_1DoubleObject_1a5e061ccb6c56a9da00ed02ac81baa638" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>Derive2</name></member>
      <member refid="classapfel_1_1DoubleObject_1a4c9d9da30a05a5b7f088718a23605529" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>DoubleObject</name></member>
      <member refid="classapfel_1_1DoubleObject_1a5b1b76382255f0ee40ff525bbf2fe6db" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>DoubleObject</name></member>
      <member refid="classapfel_1_1DoubleObject_1aff9c2b964272553047699555b47e1e2c" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>Evaluate</name></member>
      <member refid="classapfel_1_1DoubleObject_1af7977c051d6c6d9ae4d8833831d15eec" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>Evaluate1</name></member>
      <member refid="classapfel_1_1DoubleObject_1a10ba72a6ef22b07339b14e86f2f4d0d6" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>Evaluate2</name></member>
      <member refid="classapfel_1_1DoubleObject_1a24434583404d26bea5ac39460ff9e6b5" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>GetTerms</name></member>
      <member refid="classapfel_1_1DoubleObject_1a6f172200f714a48916001c9d0181437c" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>Integrate</name></member>
      <member refid="classapfel_1_1DoubleObject_1adcf75d9c79a4d6458c5672094220b501" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>Integrate1</name></member>
      <member refid="classapfel_1_1DoubleObject_1a5647585eef952847e24e1c850abcf013" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>Integrate2</name></member>
      <member refid="classapfel_1_1DoubleObject_1ac1b631d17da1e7845ccc99b318e810b1" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>MultiplyBy</name></member>
      <member refid="classapfel_1_1DoubleObject_1ab98ea4019275fa0f1d9e8f7ba5b717be" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>operator*=</name></member>
      <member refid="classapfel_1_1DoubleObject_1ad25cd6936c6f372b3e196bb339ba111b" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>operator*=</name></member>
      <member refid="classapfel_1_1DoubleObject_1a4cf203771751bfa6e06f3c71418b6d35" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>operator*=</name></member>
      <member refid="classapfel_1_1DoubleObject_1a61f805ff8dc6fe2a9b9cf3a75792bab5" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>operator*=</name></member>
      <member refid="classapfel_1_1DoubleObject_1a4a615fe9eef8b5b910863cefded8a0fc" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>operator+=</name></member>
      <member refid="classapfel_1_1DoubleObject_1a4e5959b87a3d4d9bad46651252da5643" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>operator-=</name></member>
      <member refid="classapfel_1_1DoubleObject_1ac8eff1924af8d12aae30c69d5ca9f699" prot="public" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>operator/=</name></member>
      <member refid="classapfel_1_1DoubleObject_1a36846289c26aa522f5be42a698e04e36" prot="private" virt="non-virtual"><scope>apfel::DoubleObject</scope><name>operator&lt;&lt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
